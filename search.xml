<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/01/09/as/"/>
      <url>2021/01/09/as/</url>
      
        <content type="html"><![CDATA[<p><strong>常用类</strong></p><p>A.资源类</p><p>1.颜色类Color</p><p><strong>类方法、属性</strong></p><p>&gt;使用RGB构造一个8位颜色</p><p>方法:Color.rgb(int r,int g,int b)</p><p>参数:0-255的整数</p><p>返回值:返回该颜色对应的8位16进制数</p><p>&gt;解析颜色6/8字符串</p><p>方法:Color.parseColor(“#FFFFFF”)</p><p>参数:6/8位颜色字符串</p><p>返回值:返回该颜色对应的8位16进制数</p><p>2.drawable资源类</p><p>3.typeFace字体类</p><p><strong>类方法</strong></p><p>&gt;从assets获取TypeFace对象</p><p>·方法:Typeface.createFromAsset(AssetManager,path)</p><p>·参数:AssetManager getAssets()函数获取一个AssetManager对象</p><p>Path 字体文件.ttf的路径(在assets/fonts/路径下)</p><p>·返回值:Typeface对象</p><p>&gt;从TypeFace对象设置风格</p><p>·方法:Typeface.create(Typeface family,int style)</p><p>·参数:family TypeFace对象</p><p>Style 字体样式,见类属性style</p><p>·返回值:Typeface对象</p><p>&gt;从文件系统获取TypeFace对象</p><p>·方法:Typeface.createFromFile(String path)</p><p>·参数:字体文件.ttf的路径(在安卓手机内部存储中)</p><p>·返回值:Typeface对象</p><p>&gt;返回默认TypeFace对象</p><p>·方法:Typeface.defaultFromStyle(int style)</p><p>·参数:字体样式,见类属性style</p><p>·返回值:Typeface对象</p><p><strong>类属性</strong></p><p>&gt;字体样式style相关属性</p><p>* Typeface.BOLD 加黑</p><p>* Typeface.ITALIC 斜体</p><p>* Typeface.BOLD_ITALIC 加黑斜体</p><p>* Typeface.NORMAL 无效果</p><p>&gt;TypeFace字体对象</p><p>* 下字体对象是安卓默认拥有的</p><p>* Typeface.DEFAULT 默认字体</p><p>* Typeface.DEFAULT_BOLD 加粗字体</p><p>* Typeface.SANS_SERIF sans字体</p><p>* Typeface.SERIF serif字体</p><p>* Typeface.MONOSPACE monospace字体</p><p>C.资源获取类</p><p>1.ContextCompat类</p><p><strong>类方法、属性</strong></p><p>&gt;获取drawable对象</p><p>·方法:ContextCompat.getDrawable(context,R.drawable.id)</p><p>·参数:context，见上下文节</p><p>·返回值:drawable对象</p><p>&gt;获取颜色值</p><p>·方法:ContextCompat.getColor(context, R.color.id)</p><p>·参数:context，见上下文节</p><p>·返回值:返回该颜色的6位16进制数</p><p>&gt;获取颜色状态表</p><p>·方法:ContextCompat.getColorStateList(context, R.color.id)</p><p>·参数:context，见上下文节</p><p>·返回值:返回一个颜色状态表对象ColorStateList</p><p>2.ResourcesCompat类</p><p>类方法、属性</p><p>&gt;获取drawable对象</p><p>·方法:ResourcesCompat.getDrawable(getResources(),</p><p>R.drawable.id, anotherTheme/null)</p><p>·参数:</p><p>&gt;获取颜色值</p><p>·方法:ResourcesCompat.getColor(getResources(),</p><p>R.color.id,anotherTheme/null)</p><p>·参数:</p><p>·返回值:返回该颜色的6位16进制数</p><p>&gt;获取颜色状态表</p><p>·方法:ResourcesCompat.getColorStateList(getResources(),</p><p>R.color.id,anotherTheme/null)</p><p>·参数:</p><p>·返回值:返回一个颜色状态表对象ColorStateList</p><p>3.AssetManager类</p><p><strong>类方法</strong></p><p>&gt;获取AssetManager对象</p><p>·方法:AssetManager assetManager = getAssets()</p><p><strong>实例方法</strong></p><p>&gt;列出该下级文件夹资源对象</p><p>·方法: am_obj.list()</p><p>·列出该资源对象的下级文件(夹),返回字符串数组</p><p>&gt;获取输入流对象</p><p>·方法: am_obj.open(String fileName[, int accessMode])</p><p>·功能:以指定模式打开文件，读取模式有以下几种</p><p>ACCESS_UNKNOWN 未指定具体的读取模式</p><p>ACCESS_RANDOM 随机读取</p><p>ACCESS_STREAMING 顺序读取(默认值)</p><p>ACCESS_BUFFER 缓存读取</p><p>&gt;关闭资源</p><p>·方法: am_obj.close()</p><p>·功能:关闭AssetManager实例</p><p><strong>读取文本文件</strong></p><p>4.BitmapFactor类</p><p><strong>控件类(JAVA)</strong></p><p>A.所有控件父类View</p><p>1.类方法、实例方法</p><p>2.控件标识</p><p>&gt;设置控件标识</p><p>方法:控件对象.setId(int id);</p><p>参数: * values下新建文件在R中生成未被控件使用的id，通过R.id访问</p><p>* View类方法View.generateViewId()返回一个未使用id(API&gt;17)</p><p>&gt;获取控件标识</p><p>方法:控件对象.getId()</p><p>返回值: 该控件id对应的整型值</p><p>3.控件尺寸</p><p>&gt;获取控件参数对象</p><p>方法:ViewGroup.LayoutParams parmas = 控件对象.getLayoutParams()</p><p>说明:返回该控件的参数对象，包含该控件的宽、高信息</p><p>&gt;获取控件尺寸</p><p>·获取属性</p><p>控件宽 parmas.width(int)</p><p>控件高 parmas.height(int)</p><p>&gt;设置控件尺寸</p><p>·更改属性</p><p>控件宽 parmas.width = xxxdp(int)</p><p>控件高 parmas.height = xxxdp(int)<br>·设置属性</p><p>控件对象.setLayoutParams(parmas);</p><p>4.控件背景样式</p><p>&gt;由资源id设置</p><p>函数:控件对象.setBackgroundResource(背景样式的资源文件名称(R.id))</p><p>参数:资源文件名称(R.id)(Drawable资源id或6位颜色#xxxxxx资源id)</p><p>&gt;由drawable对象设置</p><p>函数:控件对象.setBackground(drawable对象)</p><p>&gt;由颜色设置</p><p>函数:控件对象.setBackgroundColor(int color)</p><p>参数:8位16进制颜色</p><p>&gt;注意</p><p>·background默认会将图片拉伸至控件的大小，可以使用bitmap文件使背不</p><p>被拉伸</p><p>·使用setBackground时不能将颜色直接作为背景，需制作为xml并转为</p><p>drawable使用</p><p>&gt;获取背景</p><p>函数:控件对象.getBackground()</p><p>返回值:drawable对象</p><p>5.控件间距</p><p>&gt;该控件与父控件间距</p><p>&gt;子控件群与该控件间距</p><p>6.为控件绑定回调</p><p>&gt;为该控件绑定回调</p><p>函数:</p><p>&gt;注意绑定的回调方法必须是与该布局文件连接的控制文件中的公开方法</p><p>7.该控件的焦点</p><p>&gt;为该控件获取焦点&lt;分可触摸和不可触摸设备&gt;</p><p>&gt;说明</p><p>在一个活动中，只能有一个焦点，且父控件优先获得</p><p>B.所有布局父类ViewGroup</p><p>1.继承View控件</p><p>C.线性布局控件LinearLayout</p><p>1.继承ViewGroup控件</p><p>2.构造方法、类方法</p><p>3.布局方向</p><p>&gt;设置布局方向</p><p>方法:布局控件.setOrientation(布局方向);</p><p>参数:LinearLayout.HORIZONTAL0(水平)/LinearLayout.VERTICAL(竖直)</p><p>&gt;获取布局方向</p><p>方法:布局控件.getOrientation(布局方向);</p><p>返回值:0(水平)/1(竖直)</p><p>4.子控件相对于父控件的位置</p><p>5.子控件群相对于该控件的位置</p><p>6.多控件权重</p><p>&gt;注意</p><p>·参与权重分配的不是总长度，而是去掉各个子控件通过设置宽高属性获得的</p><p>长度后再利用权重为各个子控件分配剩余的长度</p><p>·权重只分配布局方向的长度，对另一个方向不起作用</p><p>7.控件分割线</p><p><strong>D.相对布局控件RelativeLayout</strong></p><p>1.继承ViewGroup控件</p><p>2.构造方法、类方法</p><p>3.子控件间相对位置</p><p>4.子控件相对父控件位置</p><p>5.子控件位置</p><p>6.子控件群相对于该控件的位置</p><p><strong>E.文本框控件TextView</strong></p><p>1.继承于View</p><p>2.构造方法、类方法</p><p>3.文字内容/大小/颜色/风格</p><p>&gt;内容</p><p>·设置文本内容</p><p>函数:TV_obj.setText(CharSequence str)</p><p>TV_obj.setText(int id)</p><p>TV_obj.setText(char[] s,int start,int len)</p><p>参数: * str CharSequence接口</p><p>* id values字符串资源id(R.id)</p><p>* s 字符数组 start 起始索引 len 索引长度</p><p>·获取文本内容</p><p>函数:TV_obj.getText().toString()</p><p>返回:字符串</p><p>&gt;文本大小</p><p>·设置文本大小</p><p>函数:TV_obj.setTextSize(TypedValue,size)</p><p>参数: * TypedValue 字体单位</p><p>可选参数:</p><blockquote><p>  TypedValue.COMPLEX_UNIT_PX : PX<br>  TypedValue.COMPLEX_UNIT_SP : SP<br>  TypedValue.COMPLEX_UNIT_DIP : DP</p></blockquote><p>* size 字体大小</p><p>·获取文本大小</p><p>函数:TV_obj.getTextSize()</p><p>返回值:浮点型，单位sp</p><p>&gt;文本颜色</p><p>·设置文本颜色</p><p>函数:TV_obj.setTextColor(int color/colorstatelist colors)</p><p>参数: * 八位16进制颜色 0xxxxxxxx</p><p>* 颜色状态表对象</p><p>·获取文本颜色</p><p>函数:TV_obj.getTextColors()</p><p>返回值:颜色状态表对象</p><p>&gt;字体与文字风格</p><p>·设置字体与文字风格</p><p>函数:TV_obj.setTypeface(typeFace tf，int style)</p><p>参数: * tf typeFace对象，利用Typeface 类可以得到typeFace字体对象</p><p>Typeface tf=Typeface.createFromAsset(getAssets(),”path”)</p><p>* style 字体风格，可选参数如下</p><p>Typeface.BOLD 加黑</p><p>Typeface.ITALIC 斜体</p><p>Typeface.BOLD_ITALIC 加黑斜体</p><p>Typeface.NORMAL 无效果</p><p>·获取字体与文字风格</p><p>函数:TV_obj.getTypeface()</p><p>返回值:Typeface字体对象</p><p>4.文本行数/字距/行距</p><p>&gt;字间距</p><p>·设置字间距</p><p>函数:TV_obj.setScaleX(float);</p><p>参数:浮点数字，默认1.0f</p><p>·获取字间距</p><p>函数:TV_obj.getScaleX();</p><p>返回值:浮点数字，默认1.0f</p><p>&gt;行间距</p><p>·设置行间距和行倍数</p><p>函数:TV_obj.setLineSpacing(ext,mul)</p><p>参数:ext为行距，mul为倍数，都为数字</p><p>·获取行间距和行倍数</p><p>函数:</p><p>参数:</p><p>5.长文本处理</p><p>6.文本特效</p><p>&gt;文本+线条</p><p>功能:为文本添加线条</p><p>函数:TV_obj.getPaint().setFlags(flag);</p><p>参数:Paint.STRIKE_THRU_TEXT_FLAG文本+中划线</p><p>Paint.UNDERLINE_TEXT_FLAG文本+下划线</p><p>&gt;文本+图片</p><p>·获得图片资源数组&lt;代表四张图片&gt;</p><p>函数:Drawable[] drawable = TV_obj.getCompoundDrawables();</p><p>返回:创建drawable数组接收四元素数组，分别代表左上右下的图片</p><p>每个元素都为图片对象img_obj</p><p>·设置图片左上/右下坐标点</p><p>函数:drawable[i].setBounds(x1,x2,y1,y2)</p><p>参数:i 图片一到四、x1,y1左上坐标、x2,y2右上坐标</p><p>·在TV中显示图片</p><p>函数:TV_obj..setCompoundDrawables(drawable[0], drawable[1],</p><p>drawable[2], drawable[3])</p><p>说明:参数为图片对象img_obj,没有图片可以用null代替</p><p>7.文本自动链接</p><p>&gt;自动链接</p><p>为特殊文本创建链接</p><p>函数:TV_obj.setAutoLinkMask(Linkify.ALL);</p><p>参数:Linkify.ALL&lt;链接所有&gt;</p><p>.EMAIL_ADDRESSES&lt;链接邮件&gt; .PHONE_NUMBERS&lt;链接电话&gt;</p><blockquote><p>  .WEB_URLS&lt;链接网站&gt; .MAP_ADDRESSES&lt;链接地图&gt;<br>  说明:创建链接后必须调用此函数才有效</p></blockquote><p>TV_obj.setMovementMethod(LinkMovementMethod.getInstance())</p><p>8.子控件群相对于该控件的位置</p><p>&gt;函数:</p><p>&gt;参数:</p><p>&gt;注意:在该控件定义，对控件群起作用</p><p><strong>F.按钮控件Button</strong></p><p>1.按钮控件Button</p><p>&gt;继承于TextView,有text系属性。</p><p>&gt;构造方法、类方法</p><p>2.图像按钮控件ImageButton</p><p>&gt;继承于ImageView,有src属性。</p><p>&gt;构造方法、类方法</p><p>3.注意</p><p>&gt;背景可使用selector类资源文件实现状态区分</p><p><strong>G.可编辑文本框控件EditText</strong></p><p>1.继承于TextView</p><p>2.构造方法、类方法</p><p>3.默认提示文本</p><p>&gt;文本内容</p><p>函数:ET_obj.setHint(CharSequence str/int id)</p><p>参数:* str CharSequence接口</p><p>* id values字符串资源id(R.id)</p><p>&gt;文本颜色</p><p>·设置文本颜色</p><p>函数:ET_obj.setHintTextColor(int color/colorstatelist colors)</p><p>参数: * 八位16进制颜色 0xxxxxxxx</p><p>* 颜色状态表对象</p><p>注意:对于TextView可能状态参数表只能显示一种颜色。但对于TextView</p><p>的子类如EditText状态参数表就会发挥作用</p><p>·获取文本颜色</p><p>函数:ET_obj.getHintTextColors()</p><p>返回值:颜色状态表对象</p><p>&gt;text属性和hint属性</p><p>·text属性:显示在输入框上的文本(可删除)</p><p>·hint属性:默认提示文本，在输入框无内容是显示</p><p>&gt;默认提示属性TextView就有了</p><p>4.限制输入类型</p><p>&gt;注意 * 有该属性时文本框不会自动换行且只显示一行</p><p>* text属性不受该属性影响，只影响用户输入</p><p>5.其它</p><p>&gt;焦点后全选文本</p><p>&gt;选中文本的背景色</p><p>·设置选中背景色</p><p>函数:ET_obj.setHighlightColor(int color)</p><p>参数:八位16进制颜色 0xxxxxxxx</p><p>·获取选中背景色</p><p>函数:ET_obj.getHighlightColor()</p><p>返回值:八位16进制颜色</p><p><strong>H.视图控件ImageView</strong></p><p>1.继承于View</p><p>2.构造方法、类方法</p><p>&gt;构造方法</p><p>3.控件前景和后景设置</p><p>&gt;前景src</p><p>函数:IV_obj.setImageDrawable(Drawable_obj)</p><p>&gt;背景background</p><p>函数:IV_obj.setBackground(Drawable_obj);</p><p>&gt;src属性和background属性的区别</p><p>·background通常指的都是背景,而src指的是内容!</p><p>·当使用src填入图片时,是按照图片大小直接填充(或按比例缩放)</p><p>使用background填入图片,则是会根据ImageView给定的宽度来进行拉伸</p><h2 id="I-单选按钮控件RadioButton"><a href="#I-单选按钮控件RadioButton" class="headerlink" title="I.单选按钮控件RadioButton"></a>I.单选按钮控件RadioButton</h2><p>1.基本概念</p><p>&gt;继承于View/TextView</p><p>&gt;创建单选按钮</p><p>·创建按钮组RadioGroup</p><p>·在按钮组下创建RadioButton按钮控件</p><p>&gt;每个RadioButton应该设置一个id否则会出现莫名bug</p><p>2.按钮组属性</p><p>&gt;继承于View控件</p><p>&gt;按钮组方向</p><p>·函数:</p><p>·功能:控制按钮的排布方向</p><p>3.按钮属性</p><p>&gt;继承于TextView控件</p><p>&gt;设置默认选中</p><p>·函数:rb_obj.setChecked(true)</p><p>·功能:设置默认选中的按钮</p><h2 id="J-复选框控件CheckBox"><a href="#J-复选框控件CheckBox" class="headerlink" title="J.复选框控件CheckBox"></a>J.复选框控件CheckBox</h2><p>1.基本概念</p><p>&gt;继承于TextView</p><p>2.设置默认选中</p><p>&gt;设置默认选中</p><p>·函数:CB_obj.setChecked(true)</p><p>·功能:设置默认选中的按钮</p><h3 id="K-开关按钮控件ToggleButton"><a href="#K-开关按钮控件ToggleButton" class="headerlink" title="K.开关按钮控件ToggleButton"></a>K.开关按钮控件ToggleButton</h3><p>1.基本概念</p><p>&gt;继承于CompoundButton</p><p>2.设置文字属性</p><p>&gt;下两来自于文本属性text</p><p>·继承于text属性</p><p>·原文本颜色、文本大小等对text起作用的属性同时作用于以下两个属性</p><p>&gt;未选文字</p><p>·设置未选文字</p><p>函数:TB_obj.setTextOff(CharSequence str)</p><p>功能:按钮没有被选中时显示的文字，默认为关闭</p><p>·获取未选文字</p><p>函数:TB_obj.getTextOff().tostring()</p><p>返回值:返回按钮没有被选中时显示的文字，默认为关闭</p><p>&gt;选中文字</p><p>·设置选中文字</p><p>函数:TB_obj.setTextOn(CharSequence str)</p><p>功能:按钮被选中时显示的文字，默认为开启</p><p>·获取选中文字</p><p>函数:TB_obj.getTextOn().tostring()</p><p>功能:返回按钮被选中时显示的文字，默认为开启</p><h3 id="L-开关控件Switch"><a href="#L-开关控件Switch" class="headerlink" title="L.开关控件Switch"></a>L.开关控件Switch</h3><p>1.基本概念</p><p>&gt;继承于CompoundButton</p><p>2.设置文字属性</p><p>&gt;下两来自于文本属性text</p><p>·继承于text属性</p><p>·原textColor、textSize等对text起作用的属性同时作用于以下两个属性</p><p>&gt;关闭文字</p><p>·设置未选文字</p><p>函数:S_obj.setTextOff(CharSequence str)</p><p>功能:开关打开时显示的文字，默认为开启</p><p>·获取未选文字</p><p>函数:S_obj.getTextOff().tostring()</p><p>功能:返回开关打开时显示的文字，默认为开启</p><p>&gt;打开文字</p><p>·设置打开文字</p><p>函数:S_obj.setTextOn(CharSequence str)</p><p>功能:开关打开时显示的文字，默认为开启</p><p>·获取打开文字</p><p>函数:S_obj.getTextOn().tostring()</p><p>返回值:返回开关打开时显示的文字，默认为开启</p><p>&gt;是否显示文字</p><p>·设置</p><p>函数:S_obj.setShowText=(true/false)</p><p>功能:是否开关上显示文字，默认不显示</p><p>·获取</p><p>函数:S_obj.getShowText=(true/false)</p><p>返回值:布尔值，是否开关上显示文字</p><p>&gt;文字间隔</p><p>·设置文字间隔</p><p>函数:S_obj.setSwitchPadding(int pix)</p><p>功能:设置滑块内文字的间隔</p><p>参数:像素px</p><p>·获取文字间隔</p><p>函数:S_obj.getSwitchPadding()</p><p>返回值:整型，滑块内文字的间隔(像素px)</p><p>3.其它</p><p>&gt;分割</p><p>·设置是否分割</p><p>函数:S_obj.setSplitTrack(boolean flag)</p><p>功能:是否设置一个间隙，让滑块与底部背景分隔</p><p>·获取是否分割</p><p>函数:S_obj.getSplitTrack()</p><p>返回值:布尔值 是否设置一个间隙，让滑块与底 部背景分隔</p><p>&gt;最小宽度</p><p>·设置开关的最小宽度</p><p>函数:S_obj.setSwitchMinWidth(int pix)</p><p>·获取开关的最小宽度</p><p>函数:S_obj.getSwitchMinWidth()</p><p>返回值:整型 像素px</p><p>4.自定义开关按钮</p><p>&gt;开关底部</p><p>·根据Drawable 对象设置</p><p>函数:S_obj.setTrackDrawable(Drawable d)</p><p>·根据资源id设置</p><p>函数:S_obj.setTrackResource(int id)</p><p>·注意:可以设置一个selector文件，设置pressed(点击)与否设置不同图像</p><p>·获取开关底部Drawable对象</p><p>函数:S_obj.getTrackDrawable()</p><p>返回值:Drawable对象</p><p>&gt;开关滑块</p><p>·根据Drawable 对象设置</p><p>函数:S_obj.setThumbDrawable(Drawable d)</p><p>·根据资源id设置</p><p>函数:S_obj.setThumbResource(int id)</p><p>·注意:可以设置一个selector文件，设置pressed(点击)与否设置不同图像</p><p>·获取开关底部Drawable对象</p><p>函数:S_obj.getTrackDrawable()</p><p>返回值:Drawable对象</p><p><strong>控件类(XML)</strong></p><p>A.所有控件父类View</p><p>1.控件标识</p><p>&gt;设置控件标识</p><p>函数:android:id=”@+id/“</p><p>参数:@+id/name</p><p>2.控件尺寸</p><p>&gt;设置控件绝对尺寸</p><p>函数:android:layout_width/height=””</p><p>参数:尺寸，单位dp</p><p>匹配父控件match_parent</p><p>填充内容wrap_content</p><p>&gt;设置控件范围尺寸</p><p>函数:android:max(min)Width(height)=””</p><p>参数:尺寸，单位dp</p><p>注意:设置该属性必须先设置绝对属性位填充内容wrap_content</p><p>&gt;调整控件边缘</p><p>函数:android:adjustViewBounds=”true/false”</p><p>注意:是否调整该控件的边缘来保证控件内容物的长宽比不变</p><p>3.控件背景样式</p><p>&gt;设置背景样式</p><p>函数:android:background=””</p><p>参数:资源文件(Drawable资源或6位颜色#xxxxxx资源)</p><p>注意:background默认会将图片拉伸至控件的大小，可以使用bitmap文件使</p><p>背景不被拉伸</p><p>4.控件间距</p><p>&gt;该控件与父控件间距</p><p>·函数:android:layout_margin=”xdp”</p><p>功能:与父控件四边都保持xdp间距</p><p>·函数:android:layout_marginTop/Bottom/Left/Right=”xdp”</p><p>功能:与父控件上/下/左/右保持xdp间距</p><p>·函数:android:layout_marginVertical/Horizontal</p><p>功能:同时与父控件上下/左右保持xdp间距</p><p>·注意:* 若与父控件间距大于xdp则不做调整，且x可为负值</p><p>* 对一个控件单独起作用</p><p>* margin是偏移间距部分不属于该控件，属于父控件</p><p>&gt;子控件群与该控件间距</p><p>·函数:android:padding=”xdp”</p><p>功能:子控件群与该控件的四边都保持xdp间距</p><p>·函数:android:paddingTop/Bottom/Left/Right=”xdp”</p><p>功能:子控件群与该控件的上/下/左/右都保持xdp间距</p><p>·函数:android:paddingVertical/Horizontal</p><p>功能:子控件群与该控件的上下/左右同时保持xdp间距</p><p>·注意:* 若与子控件群间距大于xdp则不做调整，x为正值</p><p>* 在本控件定义，对控件群起作用</p><p>* padding是填充间距部分属于控件群</p><p>5.该控件的焦点</p><p>&gt;为该控件获取焦点&lt;分可触摸和不可触摸设备&gt;</p><p>函数:android:focusable(InTouchMode)=””</p><p>参数:true/false</p><p>&gt;说明</p><p>在一个活动中，只能有一个焦点，且父控件优先获得</p><p>6.为控件绑定回调</p><p>&gt;为该控件绑定回调</p><p>函数:android:onClick=”方法名”</p><p>&gt;注意</p><p>绑定的回调方法必须是与该布局文件连接的控制文件中的公开方法</p><p>7.其它</p><p>&gt;样式宏定义</p><p>函数:style=”样式名”</p><p>功能:为该控件调用style中的所有子元素属性</p><p>&gt;控件可见性</p><p>函数:android:visibility=””</p><p>参数:visible 可见，默认</p><p>invisible 不可见，但是占据位置</p><p>gone 不可见，不占据位置</p><p><strong>B.所有布局父类ViewGroup</strong></p><p>1.继承View控件</p><p><strong>C.线性布局控件LinearLayout</strong></p><p>1.继承ViewGroup控件</p><p>2.布局方向</p><p>&gt;函数:android:orientation=””</p><p>&gt;参数:vertical(设置布局方向为竖直方向)&lt;默认&gt;</p><p>horizontal(设置布局方向为水平方向)</p><p>3.子控件相对于父控件的位置</p><p>&gt;函数:android:layout_gravity=””</p><p>&gt;参数: bottom(底)、Top(顶)、center(中)、right(右)、left(左)</p><p>center_vertical/horizontal(在水平/竖直方向居中)</p><p>Start(开始)、end(结尾)</p><p>clip_horizontal(水平方向裁剪)、clip_vertical(竖直方向裁剪)</p><p>(当子控件超出父控件时有效)</p><p>fill(水平、竖直方向拉伸控件群至父控件边缘)</p><p>fill_horizontal(水平方向拉伸控件群至父控件边缘)</p><p>fill_vertical(竖直方向拉伸控件群至父控件边缘)</p><p>可以多选使用|连接</p><p>&gt;注意:* 当父控件是线性布局时，在布局方向上的设置不起作用</p><p>* 在该控件的子控件下使用,对一个控件单独起作用</p><p>4.子控件群相对于该控件的位置</p><p>&gt;函数:android:gravity=””</p><p>&gt;参数: bottom(下)、Top(上)、center(中)、right(右)、left(左)</p><p>center_vertical/horizontal(在水平/竖直方向居中)</p><p>Start(开始)、end(结尾)</p><p>clip_horizontal(水平方向裁剪)、clip_vertical(竖直方向裁剪)</p><p>(当子控件群超出父控件时有效)</p><p>fill(水平、竖直方向拉伸控件群至父控件边缘)</p><p>fill_horizontal(水平方向拉伸控件群至父控件边缘)</p><p>fill_vertical(竖直方向拉伸控件群至父控件边缘)</p><p>可以多选使用|连接</p><p>&gt;注意:* 在该控件定义，对控件群起作用</p><p>5.多控件权重</p><p>&gt;设置该控件在父控件的权重</p><p>函数:android:weight=””</p><p>参数:数字即可</p><p>&gt;注意</p><p>·参与权重分配的不是总长度，而是去掉各个子控件通过设置宽高属性获得</p><p>的长度后再利用权重为各个子控件分配剩余的长度</p><p>·权重只分配布局方向的长度，对另一个方向不起作用</p><p>6.控件分割线</p><p>&gt;设置作为分割线的图片</p><p>函数:android:divider=””</p><p>参数:图片资源</p><p>&gt;设置分割线的位置</p><p>函数:android:showDividers=””</p><p>参数:end/beginning(控件群的末/始处添加分割线)</p><p>middle/none(控件间添加分割线/不设置分割线)</p><p>可以多选使用|连接</p><p><strong>D.相对布局控件RelativeLayout</strong></p><p>1.继承ViewGroup控件(之后属性为该控件子控件属性)</p><p>2.子控件间相对位置</p><p>&gt;函数:android:layout_to[Left/Right]Of=””</p><p>说明:该控件处于另一同级控件(由id确定)的左边/右边</p><p>&gt;函数:android:layout_to[Start/End]Of=””</p><p>说明:该控件处于另一同级控件(由id确定)的起/末处&lt;高API中可用&gt;</p><p>&gt;函数:android:layout_above/below=””</p><p>说明:该控件处于另一同级控件(由id确定)的上边/下边</p><p>&gt;函数:android:layout_alignLeft/Right/Top/Bottom=””</p><p>说明:该控件与另一同级控件(由id确定)的/左边/右边/上边/下边对齐</p><p>3.子控件相对父控件位置</p><p>&gt;函数:android:layout_alignParentLeft/Right/Top/Bottom=””</p><p>说明:该控件是否与父控件左边/右边/上边/下边对齐</p><p>&gt;函数:android:layout_alignParentStart/End=””</p><p>说明:该控件是否与父控件起始处/结束处对齐&lt;高API中可用&gt;</p><p>参数:&lt;true/false&gt;</p><p>4.子控件位置</p><p>&gt;函数:android:layout_centerHorizontal/Vertical/InParent=””</p><p>说明:该控件是否水平/竖直/完全居中</p><p>参数:&lt;true/false&gt;</p><p>5.子控件群相对于该控件的位置</p><p>&gt;函数:android:gravity=””</p><p>参数: bottom(下)、Top(上)、center(中)、right(右)、left(左)</p><p>center_vertical/horizontal(在水平/竖直方向居中)</p><p>Start(开始)、end(结尾)</p><p>clip_horizontal(水平方向裁剪)、clip_vertical(竖直方向裁剪)</p><p>(当子控件群超出父控件时有效)</p><p>fill(水平、竖直方向拉伸控件群至父控件边缘)</p><p>fill_horizontal(水平方向拉伸控件群至父控件边缘)</p><p>fill_vertical(竖直方向拉伸控件群至父控件边缘)</p><p>可以多选使用|连接</p><p>&gt;函数:android:ignoreGravity=”@id/“</p><p>功能:以该控件的子控件id为参数，将忽略gravity对该控件的作用。</p><p>&gt;注意:这两个函数在该控件定义，对控件群起作用</p><p><strong>E.文本框控件TextView</strong></p><p>1.继承于View</p><p>2.文字内容/大小/颜色/风格/字体</p><p>&gt;设置文本内容</p><p>函数:android:text=””</p><p>参数:字符串</p><p>&gt;设置文本大小</p><p>函数:android:textSize=””</p><p>参数:尺寸，单位常用sp</p><p>&gt;设置文本颜色</p><p>函数:android:textColor=””</p><p>参数: * 八位颜色(可区分文本不同状态颜色)</p><p>* ColorStateList类型的drawable资源(可区分文本不同状态颜色)</p><p>&gt;设置文字风格</p><p>函数:android:textStyle=””</p><p>参数:normal(无效果&lt;默认&gt;) bold(加粗) italic(斜体)</p><p>&gt;设置字体</p><p>函数:android:android:typeface=””</p><p>参数:sans、 serif、 monospace</p><p>3.文本行数/字距/行距</p><p>&gt;最大/小显示行数</p><p>·设置最大/小显示行数</p><p>函数:android:max/minLines=”X”</p><p>参数:数字，行数</p><p>注意:当输入内容超过maxline,文字会自动向上滚动</p><p>·设置最大行数为1&lt;某些情况必须用它&gt;</p><p>函数:android:singleLine=””</p><p>参数:true/false</p><p>&gt;字间距</p><p>·设置字间距</p><p>函数:android:textScaleX=”float”</p><p>参数:浮点数字，默认1.0f</p><p>&gt;行间距</p><p>·设置行间距</p><p>函数:android:lineSpacingExtra=””</p><p>参数:尺寸，单位dp</p><p>·设置行倍数</p><p>函数:android:lineSpacingMultiplier=””</p><p>参数:浮点数字</p><p>4.长文本处理</p><p>&gt;省略</p><p>·文本过长时使用省略号代替</p><p>函数:android:ellipsize=””</p><p>参数:end-&gt;长文本最后加…</p><p>middle-&gt;长文本中间加…</p><p>None-&gt;不加…</p><p>start-&gt;长文本开始加…</p><p>marquee-&gt;长文本最后加…且可设置为循环</p><p>&gt;循环处理</p><p>·文本过长时使用循环处理</p><p>函数:android:marqueeRepeatLimit=””</p><p>参数:marquee_forever永久循环</p><p>·设置流程</p><p>设置为单行模式:android:singleLine=”true”</p><p>设置省略模式:android:ellipsize=”marquee”</p><p>设置循环次数:android:marqueeRepeatLimit=”marquee_forever”</p><p>获取焦点:android:focusable=”true”&lt;对无触摸设备使用&gt;</p><p>android:focusableInTouchMode=”true”&lt;对有触摸设备使用&gt;</p><p>5.文本特效</p><p>&gt;文本+阴影</p><p>·设置阴影颜色</p><p>函数:android:shadowColor=””</p><p>参数:6位颜色</p><p>·设置阴影的模糊程度</p><p>函数:android:shadowRadius=””</p><p>参数:数字&lt;推荐5&gt;</p><p>·设置阴影在水平/竖直方向的偏移</p><p>函数:android:shadowDx/Dy=””</p><p>参数:为数字&lt;推荐3&gt;</p><p>&gt;文本+图片</p><p>·为文本的上/下/左/右/始/末设置图片</p><p>函数:android:drawableTop/Bottom/Left/Right/End/Start=””</p><p>参数:图片资源</p><p>·设置图片与文本间填充的间距</p><p>函数:android:drawablePadding=””</p><p>参数:为尺寸，单位dp</p><p>·设置与图片混合的纯色图片</p><p>函数:android:drawableTint=””</p><p>参数:6/8位颜色</p><p>·混合模式</p><p>函数:android:drawableTintMode=””</p><p>参数:multiply/add/src_atop/src_in/src_over</p><p>6.文本自动链接</p><p>&gt;自动链接</p><p>功能:为特殊文本创建链接</p><p>函数:android:autoLink=”all”</p><p>参数:email&lt;链接邮件&gt; map&lt;链接地图&gt; phone&lt;链接电话&gt;</p><p>all&lt;链接所有&gt; none&lt;不链接&gt; web&lt;链接网站&gt;</p><p>可使用|多选</p><p>7.子控件群相对于该控件的位置</p><p>&gt;函数:android:gravity=””</p><p>&gt;参数:bottom(下)、Top(上)、center(中)、right(右)、left(左)</p><p>center_vertical/horizontal(在水平/竖直方向居中)</p><p>Start(开始)、end(结尾)</p><p>clip_horizontal(水平方向裁剪)、clip_vertical(竖直方向裁剪)</p><p>(当子控件群超出父控件时有效)</p><p>fill(水平、竖直方向拉伸控件群至父控件边缘)</p><p>fill_horizontal(水平方向拉伸控件群至父控件边缘)</p><p>fill_vertical(竖直方向拉伸控件群至父控件边缘)</p><p>可以多选使用|连接</p><p>&gt;注意:在该控件定义，对控件群起作用</p><p><strong>F.按钮控件Button</strong></p><p>1.按钮控件Button</p><p>&gt;继承于TextView,有text系属性。</p><p>&gt;</p><p>2.图像按钮控件ImageButton</p><p>&gt;继承于ImageView,有src属性。</p><p>3.注意</p><p>&gt;背景可使用selector类资源文件实现状态区分</p><p><strong>G.可编辑文本框控件EditText</strong></p><p>1.继承于TextView</p><p>2.默认提示文本</p><p>&gt;文本内容</p><p>函数:android:hint=”默认提示文本”</p><p>&gt;文本颜色</p><p>函数:android:textColorHint=”文本颜色”</p><p>&gt;text属性和hint属性</p><p>·text属性:显示在输入框上的文本(可删除)</p><p>·hint属性:默认提示文本，在输入框无内容是显示</p><p>&gt;默认提示属性TextView就有了</p><p>3.限制输入类型</p><p>&gt;函数:android:inputType=””</p><p>&gt;参数:* text 文本</p><p>* textUri 网址</p><p>* textPassword 不可见密码</p><p>* textVisiblePassword 可见密码</p><p>* textPhonetic 默认拼音输入</p><p>* number 仅数字(0-9)</p><p>* numberSigned 带符号数字(在数字开始可输入+-)</p><p>* numberDecimal 带小数点的浮点格式(可输入.)</p><p>* phone 拨号键盘</p><p>* datetime 时间日期(相当于dare|time)</p><p>* date 日期键盘(可输入数字和英文冒号:)</p><p>* time 时间键盘(可输入数字、反斜杠/和减号-)</p><p>&gt;注意 * 有该属性时文本框不会自动换行且只显示一行</p><p>* text属性不受该属性影响，只影响用户输入</p><p>4.其它</p><p>&gt;焦点后全选文本</p><p>函数:android:selectAllOnFocus=”true/false”</p><p>&gt;选中文本的背景色</p><p>函数:android:textColorHighlight=”六位颜色”</p><p><strong>H.视图控件ImageView</strong></p><p>1.继承于TextView</p><p>2.设置控件前后景</p><p>&gt;前景</p><p>函数:android:src=”图片资源/8位颜色”</p><p>&gt;后景</p><p>函数:android:background=”图片资源/8位颜色”</p><p>&gt;src属性和background属性的区别</p><p>* background通常指的都是背景,而src指的是内容!</p><p>* 当使用src填入图片时,是按照图片大小直接填充(或按比例缩放)</p><p>使用background填入图片,则是会根据ImageView给定的宽度来进行拉伸</p><p>2.控件前景图片的显示</p><p>&gt;按比例缩放图片</p><p>方法:* 设置图片的最大范围尺寸maxHeight、maxWeidth</p><p>* 设置adjustViewBounds属性为true</p><p>注意:* 该方法是通过调整控件的边缘来保证图片按比例缩放</p><p>* 该方法优先级低于scaleType属性，即scaleType会覆盖该该方法</p><p>&gt;设置图片缩放类型</p><p>函数:android:scaleType=””</p><p>参数:* fitXY</p><p>对图像横向纵向独立缩放,使该图片完全适应ImageView</p><p>* fitStart/Center/End</p><p>保持横纵比缩放图片,直到较长边与ImageView相等,缩放完成后将图</p><p>片放在ImageView的左上角/中间/右下角</p><p>* centerInside</p><p>保持横纵比缩放图片,直到ImageView能够完全地显示图片</p><p>* centerCrop</p><p>保持横纵比缩放图片,直到完全覆盖ImageView,超过部分裁剪处理。</p><p>* matrix</p><p>默认值，不改变原图大小,从ImageView的左上角开始绘制原图,超过</p><p>ImageView的部分作裁剪处理</p><p>* center</p><p>保持原图的大小,显示在ImageView的中心。当原图大于ImageView,超</p><p>过部分裁剪处理</p><h2 id="I-单选按钮控件RadioButton-1"><a href="#I-单选按钮控件RadioButton-1" class="headerlink" title="I.单选按钮控件RadioButton"></a>I.单选按钮控件RadioButton</h2><p>1.基本概念</p><p>&gt;继承于View/CompoundButton</p><p>&gt;创建单选按钮</p><p>·创建按钮组RadioGroup</p><p>·在按钮组下创建RadioButton按钮控件</p><p>&gt;每个RadioButton应该设置一个id否则会出现莫名bug</p><p>2.按钮组属性</p><p>&gt;继承于View控件</p><p>&gt;按钮组方向</p><p>·函数:android:orientation=”horizontal/vertical”</p><p>·功能:控制按钮的排布方向</p><p>3.按钮属性</p><p>&gt;继承于TextView控件</p><p>&gt;设置默认选中</p><p>·函数:android:checked=”true/false”</p><p>·功能:设置默认选中的按钮</p><p>4.自定义按钮样式</p><p>&gt;设置按钮样式</p><p>·函数:android:button=”@drawable/selector.xml”</p><p>·功能:设置按钮样式(根据是否被勾选)</p><p>·参数:selector资源文件</p><p>·注意:selector状态为state_checked=”true/false”</p><p>&gt;设置按钮与文本的相对位置</p><p>·函数:android:drawableTop/Bottom/Left/Right/End/Start=””</p><p>功能:为文本的上/下/左/右/始/末设置按钮</p><p>参数:drawable资源,最好使用selector资源文件(区分选中与未选中区别)</p><p>也可使用系统的按钮样式@android:drawable/btn_radio</p><p>注意:在之前应该先取消原来的按钮，即使用android:button=”@null”</p><p>也可不取消原来的按钮,不过会有几个按钮同时起作用</p><h2 id="J-复选框控件CheckBox-1"><a href="#J-复选框控件CheckBox-1" class="headerlink" title="J.复选框控件CheckBox"></a>J.复选框控件CheckBox</h2><p>1.基本概念</p><p>&gt;继承于CompoundButton</p><p>2.其它</p><p>&gt;设置默认选中</p><p>·函数:android:checked=”true/false”</p><p>·功能:设置默认选中的按钮</p><p>3.自定义复选框样式</p><p>&gt;设置按钮样式</p><p>·函数:android:button=”@drawable/selector.xml”</p><p>·功能:设置按钮样式(根据是否被勾选)</p><p>·注意:selector状态为state_checked=”true/false”</p><p>&gt;设置按钮与文本的相对位置</p><p>·函数:android:drawableTop/Bottom/Left/Right/End/Start=””</p><p>功能:为文本的上/下/左/右/始/末设置按钮</p><p>参数:drawable资源,最好使用selector资源文件(区分选中与未选中区别)</p><p>也可使用系统的按钮样式@android:drawable/btn_radio</p><p>注意:在之前应该先取消原来的按钮，即使用android:button=”@null”</p><p>也可不取消原来的按钮,不过会有几个按钮同时起作用</p><h3 id="K-开关按钮控件ToggleButton-1"><a href="#K-开关按钮控件ToggleButton-1" class="headerlink" title="K.开关按钮控件ToggleButton"></a>K.开关按钮控件ToggleButton</h3><p>1.基本概念</p><p>&gt;继承于CompoundButton</p><p>2.设置文字属性</p><p>&gt;下两来自于文本属性android:text</p><p>·继承于text属性</p><p>·原textColor、textSize等对text起作用的属性同时作用于以下两个属性</p><p>&gt;设置未选文字</p><p>·函数:android:textOff=””</p><p>·功能:按钮没有被选中时显示的文字，默认为关闭</p><p>&gt;设置选中文字</p><p>·函数:android:textOn=””</p><p>·功能:按钮被选中时显示的文字，默认为开启</p><p>3.其它</p><p>&gt;设置默认选中</p><p>·函数:android:checked=”true/false”</p><p>·功能:设置默认选中的按钮</p><p>4.自定义开关按钮</p><p>&gt;设置背景样式</p><p>·函数:android:background=”@drawable/selector.xml”</p><p>·功能:设置按钮背景样式(根据是否被勾选)</p><p>·注意:selector状态为state_pressed=”true/false”</p><h3 id="L-开关控件Switch-1"><a href="#L-开关控件Switch-1" class="headerlink" title="L.开关控件Switch"></a>L.开关控件Switch</h3><p>1.基本概念</p><p>&gt;继承于CompoundButton</p><p>2.设置文字属性</p><p>&gt;下两来自于文本属性android:text</p><p>·继承于text属性</p><p>·原textColor、textSize等对text起作用的属性同时作用于以下两个属性</p><p>&gt;设置未选文字</p><p>·函数:android:textOff=””</p><p>·功能:开关没有开启时显示的文字，默认文字为关闭</p><p>&gt;设置选中文字</p><p>·函数:android:textOn=””</p><p>·功能:开关开启时显示的文字，默认文字为开启</p><p>&gt;设置显示文字</p><p>·函数:android:showText=”true/false”</p><p>·功能:是否开关上显示文字，默认不显示</p><p>&gt;设置文字间隔</p><p>·函数:android:switchPadding=”x sp”</p><p>·功能:设置滑块内文字的间隔</p><p>3.其它</p><p>&gt;分割</p><p>·函数:android:splitTrack=”true/false”</p><p>·功能:是否设置一个间隙，让滑块与底部背景分隔</p><p>&gt;最小宽度</p><p>·函数:android:switchMinWidth=”x sp”</p><p>·功能:设置开关的最小宽度</p><p>&gt;设置默认选中</p><p>·函数:android:checked=”true/false”</p><p>·功能:设置默认选中的按钮</p><p>4.自定义开关按钮</p><p>&gt;开关底部</p><p>·函数:android:track=””</p><p>·参数:drawable资源文件</p><p>·注意:可以设置一个selector文件，设置pressed(点击)与否设置不同图像</p><p>&gt;开关滑块</p><p>·函数:android:thumb=””</p><p>·参数:drawable资源文件</p><p>·注意:可以设置一个selector文件，设置checked(选中)与否设置不同图像</p><p><strong>活动</strong></p><p><strong>A.基本概念</strong></p><p>&gt;启动活动launch activity</p><p>·在点击图标后第一个运行的活动</p><p>&gt;分类</p><p><strong>上下文</strong></p><p>Context</p><p>通常我们想要获取Context对象，主要有以下四种方法</p><p>1：View.getContext,返回当前View对象的Context对象，通常是当前正在展示的Activity对象。</p><p>2：Activity.getApplicationContext,获取当前Activity所在的(应用)进程的Context对象，通常我们使用Context对象时，要优先考虑这个全局的进程Context。</p><p>3：ContextWrapper.getBaseContext():用来获取一个ContextWrapper进行装饰之前的Context，可以使用这个方法，这个方法在实际开发中使用并不多，也不建议使用。</p><p>4：Activity.this<br>返回当前的Activity实例，如果是UI控件需要使用Activity作为Context对象，但是默认的Toast实际上使用ApplicationContext也可以。</p><p>getApplication()和getApplicationContext()</p><p>上面说到获取当前Application对象用getApplicationContext，不知道你有没有联想到getApplication()，这两个方法有什么区别？相信这个问题会难倒不少开发者。</p><p>Application本身就是一个Context，所以这里获取getApplicationContext()得到的结果就是Application本身的实例。那么问题来了，既然这两个方法得到的结果都是相同的，那么Android为什么要提供两个功能重复的方法呢？实际上这两个方法在作用域上有比较大的区别。getApplication()方法的语义性非常强，一看就知道是用来获取Application实例的，但是这个方法只有在Activity和Service中才能调用的到。那么也许在绝大多数情况下我们都是在Activity或者Service中使用Application的，但是如果在一些其它的场景，比如BroadcastReceiver中也想获得Application的实例，这时就可以借助getApplicationContext()方法了。</p><p><strong>事件处理</strong></p><p>1.监听处理机制</p><p>事件监听机制中由事件源，事件，事件监听器三类对象组成</p><p>Step 1:为某个事件源(组件)设置一个监听器,用于监听用户操作</p><p>Step 2:用户的操作,触发了事件源的监听器</p><p>Step 3:生成了对应的事件对象</p><p>Step 4:将这个事件源对象作为参数传给事件监听器</p><p>step 5:事件监听器对事件对象进行判断,执行对应的事件处理器(对应事件的处理方法)</p><p>事件监听机制是一种委派式的事件处理机制,事件源(组件)事件处理委托给事件监听器<br>当事件源发生指定事件时,就通知指定事件监听器,执行相应的操作</p><blockquote><p>  对view及子类都有此</p></blockquote><blockquote><p>  1）直接用匿名内部类</p></blockquote><blockquote><p>  平时最常用的一种:直接setXxxListener后,重写里面的方法即可;<br>  通常是临时使用一次,复用性不高！</p></blockquote><blockquote><p>  btnshow.setOnClickListener(new OnClickListener()</p></blockquote><blockquote><p>  {重写点击事件的处理方法onClick()</p></blockquote><blockquote><p>  @Override</p></blockquote><blockquote><p>  public void onClick(View v){显示Toast信息}})</p></blockquote><blockquote><p>  2）使用内部类</p></blockquote><blockquote><p>  和上面的匿名内部类不同哦！<br>  使用优点:可以在该类中进行复用,可直接访问外部类的所有界面组件！</p></blockquote><p>//直接new一个内部类对象作为参数</p><blockquote><p>  btnshow.setOnClickListener(new BtnClickListener());</p></blockquote><p>//定义一个内部类,实现View.OnClickListener接口,并重写onClick()方法</p><blockquote><p>  class BtnClickListener implements View.OnClickListener</p></blockquote><blockquote><p>  {</p></blockquote><blockquote><p>  @Override</p></blockquote><blockquote><p>  public void onClick(View v) {</p></blockquote><blockquote><p>  Toast.makeText(getApplicationContext(), “按钮被点</p></blockquote><blockquote><p>  击了”, Toast.LENGTH_SHORT).show();</p></blockquote><blockquote><p>  }</p></blockquote><blockquote><p>  }</p></blockquote><blockquote><p>  3）使用外部类：</p></blockquote><blockquote><p>  就是另外创建一个处理事件的Java文件,这种形式用的比较少！因为外部类不能直接访问用户界面类中的组件,要通过构造方法将组件传入使用;这样导致的结果就是代码不够简洁！</p></blockquote><blockquote><p>  ps:为了演示传参,这里用TextView代替Toast提示！</p></blockquote><blockquote><p>  public class MyClick implements OnClickListener {</p></blockquote><blockquote><p>  private TextView textshow;</p></blockquote><blockquote><p>  //把文本框作为参数传入</p></blockquote><blockquote><p>  public MyClick(TextView txt)</p></blockquote><blockquote><p>  {</p></blockquote><blockquote><p>  textshow = txt;</p></blockquote><blockquote><p>  }</p></blockquote><blockquote><p>  @Override</p></blockquote><blockquote><p>  public void onClick(View v) {</p></blockquote><blockquote><p>  //点击后设置文本框显示的文字</p></blockquote><blockquote><p>  textshow.setText(“点击了按钮!”);</p></blockquote><blockquote><p>  } }</p></blockquote><blockquote><p>  MainActivity.java</p></blockquote><blockquote><p>  btnshow = (Button) findViewById(R.id.btnshow);</p></blockquote><blockquote><p>  txtshow = (TextView) findViewById(R.id.textshow);</p></blockquote><blockquote><p>  //直接new一个外部类，并把TextView作为参数传入</p></blockquote><blockquote><p>  btnshow.setOnClickListener(new MyClick(txtshow));</p></blockquote><blockquote><p>  } }</p></blockquote><blockquote><p>  4）直接使用Activity作为事件监听器</p></blockquote><blockquote><p>  只需要让Activity类实现XxxListener事件监听接口,在Activity中定义重写对应的事件处理器方法<br>  eg:Actitity实现了OnClickListener接口,重写了onClick(view)方法在为某些组建添加该事件监听对象<br>  时,直接.Listener(this)即可</p></blockquote><blockquote><p>  实现代码如下：MainAcivity.java:</p></blockquote><blockquote><p>  //让Activity方法实现OnClickListener接口</p></blockquote><blockquote><p>  public class MainActivity extends Activity implements OnClickListener{</p></blockquote><blockquote><p>  private Button btnshow;</p></blockquote><blockquote><p>  @Override</p></blockquote><blockquote><p>  protected void onCreate(Bundle savedInstanceState) {</p></blockquote><blockquote><p>  super.onCreate(savedInstanceState);</p></blockquote><blockquote><p>  setContentView(R.layout.activity_main);</p></blockquote><blockquote><p>  btnshow = (Button) findViewById(R.id.btnshow);</p></blockquote><blockquote><p>  //直接写个this</p></blockquote><blockquote><p>  btnshow.setOnClickListener(this);</p></blockquote><blockquote><p>  }</p></blockquote><blockquote><p>  //重写接口中的抽象方法</p></blockquote><blockquote><p>  @Override</p></blockquote><blockquote><p>  public void onClick(View v) {</p></blockquote><blockquote><p>  Toast.makeText(getApplicationContext(), “点击了按钮”,<br>  Toast.LENGTH_SHORT).show();</p></blockquote><blockquote><p>  } }</p></blockquote><blockquote><p>  5）直接绑定到标签:</p></blockquote><blockquote><p>  就是直接在xml布局文件中对应得Activity中定义一个事件处理方法 eg:public void<br>  myClick(View source) source对应事件源(组件)<br>  接着布局文件中对应要触发事件的组建,设置一个属性:onclick = “myclick”即可</p></blockquote><blockquote><p>  //自定义一个方法,传入一个view组件作为参数</p></blockquote><blockquote><p>  public void myclick(View source)</p></blockquote><blockquote><p>  {</p></blockquote><blockquote><p>  Toast.makeText(getApplicationContext(), “按钮被点击了”,<br>  Toast.LENGTH_SHORT).show();</p></blockquote><blockquote><p>  } }</p></blockquote><p><strong>注意</strong></p><p>注意:当application节点有警告，把参数设为false</p><p>:当App is not indexable by Google Search<br>Androidmanife警告时，则在活动中添的&lt;**intent-filter**&gt;节点下加一句<br>&lt;**action android:name=”android.intent.action.VIEW”** /&gt;</p><p><strong>焦点获取</strong></p><blockquote><p>  edit.requestFocus(); //请求获取焦点<br>  edit.clearFocus(); //清除焦点</p></blockquote><p><strong>前期准备</strong></p><p><strong>安卓工具</strong></p><p>1 adb</p><p>1工具类</p><p>卸载app: adb uninstall “app的包名”</p><p><strong>使用技巧</strong></p><p><strong>A.快捷键</strong></p><p>1.ctrl</p><p>按住CTRL可通过点击到达目标位置</p><p>2.设计UI时可以点击右侧的preview进行预览</p><p>3.alt+enter 可以帮助导入需要的包</p><p><strong>B.GUI设计技巧</strong></p><p>1.分割线</p><blockquote><p>  &gt;直接在添加一个view,这个view的作用为显示出一条线，可以设置他的背景色或使用图片</p></blockquote><blockquote><p>  &gt;线性布局的divier属性<br><img src="http://fp1.fghrsh.net/2021/01/08/38d013ce6d255d469d9e008b2147b8d3.png" alt="项目截图.png"><br><img src="http://fp1.fghrsh.net/2021/01/08/1c51df50a927dbc0d3af9f21134e1efa.png" alt="界面效果.png"><br><img src="http://fp1.fghrsh.net/2021/01/08/35d3326bfbb37551f8e6b647b0f286e9.png" alt="运行效果.png"></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android学习一</title>
      <link href="2021/01/08/Android%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
      <url>2021/01/08/Android%E5%AD%A6%E4%B9%A0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h5 id="安装与环境配置"><a href="#安装与环境配置" class="headerlink" title="安装与环境配置"></a>安装与环境配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;安装JDK(12)</span><br><span class="line">&gt;安装Android Studio</span><br><span class="line">&gt;下载SDK(已有SDK则可选择SDK,无SDK则下载至指定文件夹)</span><br><span class="line">&gt;配置AS</span><br><span class="line">  A.AS缓存</span><br><span class="line">    ·功能：缓存一些数据存放配置、插件缓存文件夹、最近打开的项目</span><br><span class="line">    ·配置：默认AS将缓存放在C:\Users\登录名\.AndroidStudio下，只需找到安装目录\bin\idea.properties文件修改idea.config.&#x2F;system.path为目标缓存路径(去掉注释)重启AS后删除删除原.AndroidStudio文件夹即可</span><br><span class="line">    ·注意：重启AS会询问是否导入之前设置，应选择import然后选择原.AndroidStudio文件夹导入</span><br><span class="line">  B.gradle框架</span><br><span class="line">    ·功能: 用于构建app的框架</span><br><span class="line">    ·配置: 默认gradle框架是在C:\Users\登录名\.gradle中，只需要在环境变量里面配置GRADLE_USER_HOME为目标路径，重启AS后删除原.gradle文件夹即可</span><br><span class="line">  C.AVD虚拟机</span><br><span class="line">    ·功能: 用于模拟安卓机</span><br><span class="line">    ·配置: 默认AVD虚拟机放在C:\Users\登录名\.android\avd中,只需环境变量配置ANDROID_SDK_HOME变量为存放.Android文件夹的路径(不包括.Android文件夹)并删除原.android文件夹即可</span><br><span class="line">    ·注意若原.android文件夹中有虚拟机则可以把虚拟机移到新的.android文件夹中，并打开.android\avd下对应虚拟机的,ini文件编辑路径为新的.android文件夹路径</span><br></pre></td></tr></table></figure><h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><p>A.资源&lt;res下皆为资源&gt;</p><p>1.基本资源</p><p>&gt;字符串</p><p>&gt;动画</p><p>&gt;音频等</p><p>&gt;各种XML文件</p><p>2.drawable资源</p><p>&gt;任何图片</p><p>&gt;XML文件</p><p>B.访问资源</p><p>0.基本</p><p>&gt;访问基本方法</p><p>·在XML中访问资源通过@,可以直接使用</p><p>·在JAVA中访问资源，先要通过R文件找到该资源的id，在通过资源id构建</p><p>该资源的对象</p><p>&gt;因为资源即指res下文件，故访问资源不必包括res之上目录</p><p>1.Drawable资源</p><p>&gt;XML中访问</p><p>使用@资源路径访问</p><p>&gt;Java中访问</p><p>使用R.资源路径得到资源id</p><p>通过以下方法转化为drawable对象</p><p>·使用getResources</p><p>函数:getResources().getDrawable(R.drawable.id);</p><p>注意:该方法已经过时！</p><p>·使用ContextCompat类</p><p>函数:ContextCompat.getDrawable(context,R.drawable.id)</p><p>·使用ResourcesCompat类</p><p>函数:ResourcesCompat.getDrawable(getResources(),</p><p>R.drawable.id, anotherTheme/null)</p><p>当你这个Drawable不受主题影响时</p><p>ResourcesCompat.getDrawable(getResources(), R.drawable.name, null);<br>当你这个Drawable受当前Activity主题的影响时<br>ContextCompat.getDrawable(getActivity(), R.drawable.name);<br>当你这个Drawable想使用另外一个主题样式时<br>ResourcesCompat.getDrawable(getResources(), R.drawable.name,</p><p>anotherTheme);</p><p>2.values中的的元素-常量</p><p>&gt;XML中访问</p><p>使用@资源路径访问@values子目录/xxx</p><p>&gt;Java中访问</p><p>使用R.资源路径得到资源id</p><p>通过以下方法转化为values对应的具体值/对象</p><p>·使用ContextCompat类</p><p>函数:ContextCompat.getColor(context, R.color.id)</p><p>·使用ResourcesCompat类</p><p>函数:ResourcesCompat.getColor(getResources(),R.color.id,</p><p>anotherTheme/null)</p><p>3.layout中的元素-控件</p><p>&gt;XML中访问</p><p>使用@资源路径访问@id/</p><p>&gt;Java中访问</p><p>使用R.资源路径得到资源id R.id.控件id</p><p>通过以下方法转化为该控件对应的对象</p><p>·函数:findViewById(控件id)</p><p>注意:该函数返回值为View，不同的控件id将返回不同控件对象</p><p>C.单位</p><p>1.尺寸</p><p>&gt;dp 设备独立像素(控件大小)</p><p>&gt;mm 毫米</p><p>&gt;in 英寸</p><p>&gt;px 像素</p><p>&gt;pt</p><p>&gt;sp (字体大小)</p><p>2.颜色</p><p>&gt;以#开始用8位数字字符串表示(使用字符串表示时，可省略前两位)</p><p>&gt;以0x开始的8位整型数字(使用整型表示时，不可省略前两位)</p><p>&gt;组成</p><p>前两位:00-ff 控制透明度，越大越不透明</p><p>后六位:000000-ffffff 控制显示颜色</p><p>D.开发流程</p><p>1.创建活动(java)</p><p>2.注册活动及启动条件(AndroidManifest)</p><p>3.活动对应布局(layout)</p><p>E.XML语法</p><p>1.XML文件中的函数可以选项可以选择与即|</p><p>2.XML元素</p><p>&gt;每个元素使用&lt;xxx&gt;开始当遇到&lt;xxx/&gt;表明该元素完整</p><p>&gt;当无子元素是可&lt;xxxx/&gt;</p><p>&gt;元素可以嵌套</p><p>F.添加文件</p><p>1.添加xml文件</p><p>&gt;右击选择xxx.resoucure file创建</p><p>&gt;特殊的,添加view.xml文件可在创建activity文件时勾选generate layout</p><p>file可自动创建activity对应的布局</p><p>2.添加activity.java文件</p><p>&gt;在包名处右击选择新建active，选择需要的active模板即可</p><p>&gt;empty active空白活动文件</p><p>3.添加其它资源文件</p><p>&gt;右击选择在此处打开文件夹，把资源文件对应复制至此即可</p><p>G.控件概念</p><p>1匹配父控件 继承父控件的空间，且会在父控件剩余空间上分配</p><p>2填充模式 会选择可容纳的最小空间</p><p>3控件的不规定位置都是左上角</p><p>4布局属于控件，在某控件内的文字/图片等等元素也属于控件</p><p>H.控件继承</p><p><img src="media/b5c2e732c501b452685d4fac8ad7bfa9.png"></p><h5 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h5><p>A.Java文件夹</p><p>1.用途</p><p>&gt;用于存放所有Activity对应的View控件的控制代码</p><p>B.layout文件夹</p><p>1.用途</p><p>&gt;用于存放该应用的所有布局文件View.xml</p><p>C.drawable文件夹</p><p>1.用途</p><p>&gt;存放图片资源</p><p>&gt;存放drawable类型xml格式文件</p><p>D.mipmap文件夹</p><p>1.用途</p><p>&gt;存放图片资源</p><p>&gt;存放mipmap类型格式文件</p><p>2.包括</p><p>&gt;mipmap-hdpi：高分辨率，一般图片放这里</p><p>&gt;mipmap-mdpi：中等分辨率，很少，除非兼容的的手机很旧</p><p>&gt;mipmap-xhdpi：超高分辨率，慢慢往这里过渡</p><p>&gt;mipmap-xxhdpi：超超高分辨率，这个在高端机上有所体现</p><p>E.Value文件夹</p><p>1.用途</p><p>&gt;定义尺寸资源demens.xml</p><p>&gt;定义字符串资源string.xml</p><p>&gt;定义样式资源styles.xml</p><p>&gt;定义颜色资源colors.xml</p><p>&gt;定义数组资源arrays.xml</p><p>&gt;自定义控件的属性attrs.xml</p><p>自定义控件时用的较多</p><p>&gt;主题文件theme.xml</p><p>和styles很相似，但会对整个应用中的Actvitiy或指定Activity起作用，一</p><p>般是改变窗口外观的</p><p>可在Java代码中通过setTheme使用，或者在Androidmanifest.xml中为</p><p>&lt;application…&gt;添加theme的属性</p><p>2.子文件</p><p>&gt;demens元素</p><p>&gt;string元素</p><p>&lt;string name=”str_name”&gt;字符串资源&lt;/string&gt;</p><p>&gt;styles元素</p><p>&lt;style name=”the_name” parent=”Theme.AppCompat.Light.DarkActionBar”&gt;</p><p>&lt;item name=”colorPrimary”&gt;@color/colorPrimary&lt;/item&gt;</p><p>&lt;/style&gt;</p><p>&gt;colors元素</p><p>&lt;color name=”col_name”&gt;#+6位数字资源&lt;/color&gt;</p><p>&gt;arrays元素</p><p>&gt;attrs元素</p><p>&gt;theme元素</p><p>F.assets文件夹</p><p>1.用途</p><p>&gt;存放应用使用的静态资源，该文件夹下资源不会被编译生成id</p><p>2.创建</p><p>&gt;在main文件夹下创建assets文件夹</p><p>&gt;该文件夹下可创建文件夹</p><p>G.color文件夹</p><p>1.用途</p><p>&gt;存放colorstatelist颜色状态表</p><p>2.创建</p><p>&gt;在src文件夹下创建color文件夹</p><p>&gt;该文件夹下创建color.xml文件</p><h5 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h5><p>一.布局文件</p><p>A.View.xml文件</p><p>1.用途</p><p>&gt;用于构建活动对应控件(布局)</p><p>2.元素</p><p>&gt;见控件节</p><p>二.注册活动文件</p><p>A.AndroidManifest.xml文件</p><p>1.用途</p><p>&gt;用于配置应用、注册活动</p><p>2.元素</p><p>&gt;manifest元素</p><p>&gt;application元素</p><p>·是否备份</p><p>指令:android:allowBackup=””</p><p>参数:true、false</p><p>·应用图标</p><p>指令:android:icon=””</p><p>参数:图标资源</p><p>·应用名称</p><p>指令:android:label=””</p><p>参数:字符串</p><p>·应用主题</p><p>指令:android:theme=”@style/AppTheme”</p><p>参数:style.xml中定义的theme元素</p><p>&gt;activity元素(application子元素)</p><p>·注册活动</p><p>指令:android:name=”活动名”</p><p>参数:活动名(即java下的Java文件名) 一般使用.+活动名</p><p>含义:注册这个活动</p><p>创建activity后会自动注册该活动</p><p>·应用图标</p><p>指令:android:icon=””</p><p>参数:ico图标资源</p><p>·应用名称</p><p>指令:android:label=””</p><p>参数:字符串</p><p>·应用主题</p><p>指令:android:theme=”e”</p><p>参数:style元素</p><p>&gt;intent-filter(activity子元素)意图过滤器</p><p>·决定程序入口(实现启动活动)</p><blockquote><p>  &lt;action android:name=”android.intent.action.MAIN” /&gt;<br>  &lt;category android:name=”android.intent.category.LAUNCHER” /&gt;</p></blockquote><p>三.控制文件(active.java)</p><p>A.基本概念</p><p>B.函数</p><p>1.寻找控件</p><p>&gt;函数:findViewById(id)</p><p>&gt;参数:id(R.id.控件id)</p><p>&gt;返回值:返回在目标id对应的View对象，必须使用对应的控件类的对象</p><p>接收,之后该对象就代表这个View控件</p><p>2.活动跳转</p><p>&gt;函数:Intent(Activity1.this,Activity2.class)</p><p>&gt;参数:活动1.this和活动2.class</p><p>&gt;功能:实现两活动跳转</p><p>3.连接布局</p><p>&gt;函数:setContentView(index);</p><p>&gt;参数:index,布局文件索引在R文件下R.layout.布局文件名</p><p>&gt;功能:连接该控制文件对应的布局文件</p><p>四.样式文件drawable</p><p>A.shape类文件</p><p>1.用途</p><p>&gt;用于制作背景样式</p><p>&gt;需要在drawable文件夹下新建shape根节点的xml文件</p><p>&gt;shape类是drawable的子类</p><p>2.元素</p><p>&gt;顶级元素shape&lt;以下为shape的子元素&gt;</p><p>默认为矩形边框</p><p>&gt;元素stroke&lt;边框线&gt;</p><p>·设置边框线的粗细</p><p>函数:android:width = “”</p><p>参数:尺寸，单位一般dp</p><p>·设置边框线颜</p><p>函数:android:color=””</p><p>参数:6位颜色</p><p>·设置边框线的虚线空白段/实线段长度</p><p>函数:dashGap/Width=””:</p><p>参数:尺寸，单位一般dp</p><p>&gt;元素padding&lt;样式内边距&gt;</p><p>·设置边框与子控件群的间距</p><p>函数:android:bottom/left/right/top=””</p><p>参数:尺寸，单位dp</p><p>&gt;元素corner&lt;圆角化，仅矩形可用&gt;</p><blockquote><p>  ·同时设置四个圆角尺寸，低优先级</p></blockquote><blockquote><p>  函数:android:radius=””</p></blockquote><blockquote><p>  参数:尺寸，单位px</p></blockquote><blockquote><p>  ·分别设置四个圆角尺寸，高优先级</p></blockquote><p>函数:android:bottomLeft/Right/Left/RightRadius=””</p><blockquote><p>  参数:尺寸，单位px</p></blockquote><p>&gt;solid元素&lt;样式色&gt;</p><blockquote><p>  ·设置样式的背景色</p></blockquote><blockquote><p>  函数:android:color=””</p></blockquote><blockquote><p>  参数:6位颜色</p></blockquote><p>&gt;gradient元素&lt;样式色&gt;</p><blockquote><p>  ·设置渐变起始/中间/结束颜色</p></blockquote><blockquote><p>  函数:android:start/center/endColor=””</p></blockquote><blockquote><p>  参数:6位颜色</p></blockquote><blockquote><p>  ·设置颜色辐射角度&lt;线性渐变时可用&gt;</p></blockquote><blockquote><p>  函数:android:angle=””</p></blockquote><blockquote><p>  参数:数字，必须为45的倍数</p></blockquote><blockquote><p>  ·设置渐变半径&lt;辐射渐变时可用&gt;</p></blockquote><blockquote><p>  函数:android:gradientRadius=”float”</p></blockquote><blockquote><p>  参数:数字</p></blockquote><blockquote><p>  ·设置渐变中心X/Y轴上的相当位置&lt;辐射/扫描渐变可用&gt;</p></blockquote><blockquote><p>  函数:android:centerX/Y=”float”</p></blockquote><blockquote><p>  参数:数字，范围为0～1，默认0.5</p></blockquote><blockquote><p>  ·设置渐变的类型</p></blockquote><blockquote><p>  函数:android:type=””</p></blockquote><blockquote><p>  参数:linear(线性渐变) radial(辐射渐变) sweep(渐变)</p></blockquote><p>B.selector类文件</p><p>1.基本概念</p><blockquote><p>  &gt;用途</p></blockquote><blockquote><p>  ·用于制作可选择样式,解析后为一个StateListDrawable对象</p></blockquote><blockquote><p>  ·用于生成颜色状态表，解析后为一个ColorStateList对象</p></blockquote><blockquote><p>  &gt;创建</p></blockquote><blockquote><p>  ·制作可选样式时在drawable文件夹下新建selector根节点xml文件</p></blockquote><blockquote><p>  ·制作颜色状态表时在res文件夹下新建color文件夹，在color文件</p></blockquote><blockquote><p>  夹下新建selector根节点xml文件</p></blockquote><blockquote><p>  &gt;注意</p></blockquote><blockquote><p>  ·selector类是drawable的子类</p></blockquote><blockquote><p>  ·selector节点下只能是item节点,一个item元素指明一个状态</p></blockquote><blockquote><p>  ·每个item元素只有两个函数一个子节点</p></blockquote><blockquote><p>  一个为指明触发状态(state_xxx)</p></blockquote><blockquote><p>  一个为触发背景/颜色(drawable/color)</p></blockquote><p>一个Shape节点(也可将shape通过drawable引入)</p><p>·selector是通过匹配来寻找对应状态的若状态在前则会优先匹配，所</p><p>以将不指明状态的节点放在最后，它相当一个通配符</p><p>2.item元素</p><blockquote><p>  &gt;指定状态效果</p></blockquote><blockquote><p>  函数:android:drawable=”drawable_res/color”</p></blockquote><blockquote><p>  参数:Drawable资源/8为颜色字符串</p></blockquote><blockquote><p>  &gt;指定是否获得焦点</p></blockquote><blockquote><p>  函数:state_focused=”true/false”<br>  &gt;指定是否获得窗口焦点</p></blockquote><blockquote><p>  函数:state_window_focused=”true/false”<br>  &gt;控件是否可用</p></blockquote><blockquote><p>  函数:state_enabled=”true/false”<br>  &gt;控件可否被勾选</p></blockquote><blockquote><p>  函数:state_checkable=”true/false”</p></blockquote><blockquote><p>  例如:checkbox<br>  &gt;控件是否被勾选</p></blockquote><blockquote><p>  函数:state_checked=”true/false”</p></blockquote><blockquote><p>  实例:checkbox，RadioButton<br>  &gt;控件是否被选择(有滚轮的情况)</p></blockquote><blockquote><p>  函数:state_selected=”true/false”<br>  &gt;控件是否被按下</p></blockquote><blockquote><p>  函数:state_pressed=”true/false”</p></blockquote><blockquote><p>  例如:按钮<br>  &gt;控件是否处于活动状态</p></blockquote><blockquote><p>  函数:state_active=”true/false”</p></blockquote><blockquote><p>  例如:slidingTab<br>  &gt;控件包含多个子控件时,确定是否只显示一个子控件</p></blockquote><blockquote><p>  函数:state_single=”true/false”<br>  &gt;控件包含多个子控件时,确定第一个子控件是否处于显示状态</p></blockquote><blockquote><p>  函数:state_first=”true/false”<br>  &gt;控件包含多个子控件时,确定中间一个子控件是否处于显示状态</p></blockquote><blockquote><p>  函数:state_middle=”true/false”<br>  &gt;控件包含多个子控件时,确定最后一个子控件是否处于显示状态</p></blockquote><blockquote><p>  函数:state_last=”true/false”</p></blockquote><p>C.bitmap类文件</p><p>1.用途</p><p>&gt;用于制作位图</p><p>&gt;需要在drawable文件夹下新建bitmap根节点的xml文件</p><p>2.bitmap元素</p><p>&gt;平铺模式</p><p>函数:android:tileModeX=””</p><p>功能:定义平铺模式。平铺模式启用,位图会重复。</p><p>参数: * disabled 不平铺位图(默认值)</p><p>* clamp 当着色器绘制范围超出其原边界时复制边缘颜色</p><p>* repeat 水平和垂直重复图像。</p><p>* mirror 水平和垂直重复图像,并交替镜像图使相邻图相接</p><p>&gt;图像源</p><p>函数:android:src=”图像资源”</p><p>功能:定义平铺模式，平铺模式启用,位图会重复</p><p>&gt;图像位置</p><p>函数:android:gravity=”l”</p><p>功能:定义图像的位置</p><p>参数: bottom(下)、Top(上)、center(中)、right(右)、left(左)</p><p>center_vertical/horizontal(在水平/竖直方向居中)</p><p>Start(开始)、end(结尾)</p><p>clip_horizontal(水平方向裁剪)</p><p>clip_vertical(竖直方向裁剪)</p><p>(当子控件群超出父控件时有效)</p><p>fill(水平、竖直方向拉伸控件群至父控件边缘)</p><p>fill_horizontal(水平方向拉伸控件群至父控件边缘)</p><p>fill_vertical(竖直方向拉伸控件群至父控件边缘)</p><p>可以多选使用|连接</p><p>D.resources类常量文件</p><p>0.创建方法</p><blockquote><p>  &gt;需要在value文件夹下新建resources根节点的xml文件</p></blockquote><p>1.动态id生成文件</p><p>&gt;用途</p><blockquote><p>  用于生成动态控件的id</p></blockquote><p>&gt;item元素(resources子元素)</p><blockquote><p>  ·设置id对应调用文本</p></blockquote><blockquote><p>  属性:name=”my_view”</p></blockquote><blockquote><p>  ·设置类型</p></blockquote><blockquote><p>  属性:type=”id”</p></blockquote><p>2.样式文件</p><p>&gt;用途</p><blockquote><p>  用于将相同的属性定义在一起，在控件中调用style即可使该控件拥该</p></blockquote><blockquote><p>  style的所有属性</p></blockquote><p>&gt;注意</p><blockquote><p>  在style中定义的的属性优先级低于在控件中定义的属性</p></blockquote><p>&gt;style元素(resources子元素)</p><blockquote><p>  ·设置style元素名称</p></blockquote><blockquote><p>  属性:name=”my_style”</p></blockquote><blockquote><p>  功能:用于在控件处引用</p></blockquote><blockquote><p>  ·继承父style</p></blockquote><blockquote><p>  属性:parent=”父style(使用点隔开)”</p></blockquote><blockquote><p>  功能:继承父style的使用子元素</p></blockquote><blockquote><p>  注意:当所需继承的父style来自本文件，还可不使用parent属性，直</p></blockquote><blockquote><p>  接将该style名称以父style名称.此style名称方式命名来达到</p></blockquote><blockquote><p>  继承父style所有子元素,使用该style时需通过父style名称.</p></blockquote><blockquote><p>  此style名称来访问使用</p></blockquote><p>&gt;item元素(style子元素)</p><blockquote><p>  ·设置宏定义属性名称</p></blockquote><blockquote><p>  属性:name=”android:xxx”</p></blockquote><blockquote><p>  功能:用于在说明该属性所代表属性</p></blockquote><blockquote><p>  ·设置宏定义属性值</p></blockquote><blockquote><p>  方法:在item元素体中直接设置宏定义属性值即可(不需双引号)</p></blockquote><blockquote><p>  实例:&lt;item name=”android:button”&gt;@drawable/back&lt;/item&gt;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进出门播报</title>
      <link href="2021/01/06/%E8%BF%9B%E5%87%BA%E9%97%A8%E6%92%AD%E6%8A%A5/"/>
      <url>2021/01/06/%E8%BF%9B%E5%87%BA%E9%97%A8%E6%92%AD%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<h5 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h5><p><font  color = blue size = 4>前几天出去看到外面店里有可以识别有人进出门的小玩意，想着自己回来实现一下<br></font><br><br><font  size = 4>没用单片机,本来打算采用两个红外循迹模块A和B,若是先触发A在触发B则发出一个电平信号1，判断为有人进门，播放进门欢迎词。若是先触发B在触发A则发出一个电平信号0，判断为有人出门，播放出门欢迎词。但是最因为宿舍的门上不好安装，最终只是实现了最简版，等有时间在把这个补全<br></font><br></p><h5 id="语音播报模块"><a href="#语音播报模块" class="headerlink" title="语音播报模块"></a>语音播报模块<br></h5><p><font  size = 4> 负责根据电平信号播放不同音乐。</font><br><br><img src="http://fp1.fghrsh.net/2021/01/07/41abaaa2bc3e4a33c36c841fe49325b6.png" alt="41abaaa2bc3e4a33c36c841fe49325b6.png"></p><h5 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果<br></h5><p><img src="http://fp1.fghrsh.net/2021/01/07/0540c6daff2a6857fc87da3d198da85d.jpg" alt="0540c6daff2a6857fc87da3d198da85d.jpg"><br></p><p><font  color = red size = 4>为了节省整个装置体积,使用的是手机上拆下的小扬声器</font><br></p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语音模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019电赛-纸张计数装置设计</title>
      <link href="2021/01/06/2019%E7%94%B5%E8%B5%9B-%E7%BA%B8%E5%BC%A0%E8%AE%A1%E6%95%B0%E8%A3%85%E7%BD%AE%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/01/06/2019%E7%94%B5%E8%B5%9B-%E7%BA%B8%E5%BC%A0%E8%AE%A1%E6%95%B0%E8%A3%85%E7%BD%AE%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h5 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因<br></h5><p><font color = blue size = 4>作为实验室的一员，每年的电赛是尽量要参加的，参加了19电赛,虽然最终成绩不理想但还是做个记录</font><br></p><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目<br></h5><p><img src="http://fp1.fghrsh.net/2021/01/06/06e3ea08ff339a7d2e442c199c1a4540.png" alt="06e3ea08ff339a7d2e442c199c1a4540.png"></p><h5 id="和实验室两位同学组队完成这次比赛-我负责硬件搭建和一些模块调试"><a href="#和实验室两位同学组队完成这次比赛-我负责硬件搭建和一些模块调试" class="headerlink" title="和实验室两位同学组队完成这次比赛,我负责硬件搭建和一些模块调试"></a>和实验室两位同学组队完成这次比赛,我负责硬件搭建和一些模块调试</h5><p><font color = blue size = 4>这是我们做的硬件，用亚克力切的，上部分可以拿起来，下部分固定负责放置A4纸，在两部分中央分别嵌入两块50*50的覆铜板,作为电容的两级,纸张数量的变化与电容变化存在一定关系，通过测量电容值就可以知道有几张纸。而电容的测量利用LC震荡电路来处理,只要将震荡频率传入单片机,单片机进行处理后就可以测得电容的变化量,进而推出纸张数目</font><br><br><img src="http://fp1.fghrsh.net/2021/01/06/93054dfa4b62fc4a329e4a8b0bda676a.jpg" alt="93054dfa4b62fc4a329e4a8b0bda676a.jpg"><br><br><font  color = blue size = 4>这是我做的附加模块，使用MY2490-16P语音模块,可以播报语音，将测量的纸张数目报出来,语音是使用科大讯飞API合成的</font><br><br><img src="http://fp1.fghrsh.net/2021/01/06/c3ab9531bddc817c1d6b1270b2c8dd47.jpg" alt="c3ab9531bddc817c1d6b1270b2c8dd47.jpg"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><font  color = red size = 4>1.这次比赛我有点着急了，题目刚下来，没有过多思考硬件搭建方案就开始干了，导致我们硬件上和别人就拉开了一段差距，之后做事情一定要多想想在动手</font><br><br><font  color = red size = 4>2.关于电容的测量,一定一定要注意干扰的处理，该接地的地方必须得接地，该用屏蔽线的地方也必须使用屏蔽线,尽量减少寄生电容对测量的影响</font><br><br><font  color = red size = 4>3.还有,做这个比赛真的是太废人了，整个四天三夜估计也没睡10个小时,真的是要命,关键是自己在技术上还是差的太远，做了好多重复性工作，看实验室的其它大佬，人家早早就完成了，不像我们奋战到最后一秒，害🤣🤣🤣</font><br><br><font  color = red size = 4>4.最后,附上一张比赛时努力的同学们👍👍👍</font><br><br><img src="http://fp1.fghrsh.net/2021/01/06/f71d5f9d8828e2b3bf50455da871f832.jpg" alt="f71d5f9d8828e2b3bf50455da871f832.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科创实验室总结</title>
      <link href="2021/01/06/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%80%BB%E7%BB%93/"/>
      <url>2021/01/06/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h5 id="说点废话"><a href="#说点废话" class="headerlink" title="说点废话"></a>说点废话</h5><p><font  size = 4>在实验室呆了几年了,还记得大一刚来实验室的第一个任务是做RS触发器学习C语言,还有用NE555设计方波发生器，当时连C语言编译环境都搭建半天，第一次焊接洞洞板也是很别扭，之后又接触到单片机，先学的51单片机，第一步是搭建最小系统板，随后在这个板子上完成实验室的每周任务，每个周六都要去考核，现在想起来还觉得挺有意思，不过U1S1当时去考核还是相当紧张的生怕自己被刷掉,不过还好到大一结束十几次任务每次都过了，终于成为一名科创班的正式成员了😁最后在大二又接触32单片机，打开了新世界的大门,32的运行速度更快，可以运行一些运算量大的程序，还接触到了树莓派，ESP32，msp430等等芯片。编程语言也从只会C进步到学习了python java ,python让我体会到了编程的快乐，它的语法简单库也很多,当时有个学长带我们搞计算机视觉，我当时选了一个手势识别的题目，为了完成这个题目，先后学了numpy矩阵运算库 opencv 视觉处理库还有Keras TS等智能算法库，照着别人的代码搭建了模型，为了加快训练速度还学了python的多进程、线程、协程等机制(虽然最后没用上🤦‍♂️)</font><br><br><font  color = red size = 4>最后还是要感谢实验室给我提供这么好的平台，总之在实验室学到了很多东西除了技术上的东西还有一些与人相处的道理,这几年在实验室经历还是很值得滴</font><br></p><h5 id="一-基于STM32的提醒喝水装置"><a href="#一-基于STM32的提醒喝水装置" class="headerlink" title="一.基于STM32的提醒喝水装置"></a>一.基于STM32的提醒喝水装置</h5><p><font  color = blue size = 4>大一参加TI杯的作品,设计并制作了一个智能提醒喝水装置。系统的主要功能模块包括：基于DS18B20的水温传感器模块、HX711测重模块、超声波模块HSCR04、OLED模块、MY2490-24SS语音模块、电源模块。利用蓝牙模块来设置预计喝水量，测重模块检测出每次喝水量，基于STM32F103RCT6单片机通过对预计喝水量和每次喝水量数据的处理。由OLED显示结果和语音模块来实现提醒喝水的作用。这个装置只是将各个模块调试好的组装品，程序也比较简单,就是水杯被拿起后的各种逻辑不好处理，只要判断清楚水杯拿起后是添水还是喝水还是水杯中已经无水问题就迎刃而解了<br></font><br><br><img src="http://fp1.fghrsh.net/2021/01/06/147068f545c7cda7e3c9c0f6282a79a6.jpg" alt="147068f545c7cda7e3c9c0f6282a79a6.jpg"><br><img src="http://fp1.fghrsh.net/2021/01/06/4cc4754173846eea81cd4fd81622feda.jpg" alt="4cc4754173846eea81cd4fd81622feda.jpg"><br></p><h5 id="二-基于STM32的平衡小车"><a href="#二-基于STM32的平衡小车" class="headerlink" title="二.基于STM32的平衡小车"></a>二.基于STM32的平衡小车</h5><p><font  color = blue size = 4>刚学习了pid算法,打算自己做辆平衡小车实践一下，电机(带编码器)和车架是在淘宝‘平衡小车之家’买的，陀螺仪用的MPU6050(关键便宜🤣)，硬件使用洞洞板焊接。代码部分参考‘平衡小车之家’提供源码，其中最难的还是pid参数调定，不得技巧前，我觉得这pid参数就和玄学一样🤦‍♂️，最后还是通过‘平衡小车之家’的小车PID参数调节技巧才最终调好🤣🤣🤣不容易不容易。。</font><br></p><p><img src="http://fp1.fghrsh.net/2021/01/08/02209303039d0ca27316bbd6011038a0.png" alt="02209303039d0ca27316bbd6011038a0.png"><br></p><p><font  color = red size = 4>最终效果放B站上了</font><br></p><iframe         width="400"     height="200"      src="//player.bilibili.com/player.html?aid=671019901&bvid=BV12a4y1n7ZQ&cid=279535514&page=1"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     allowfullscreen="true"> </iframe><h5 id="三-基于STM32和树莓派的板球控制系统"><a href="#三-基于STM32和树莓派的板球控制系统" class="headerlink" title="三.基于STM32和树莓派的板球控制系统"></a>三.基于STM32和树莓派的板球控制系统</h5><p><font  color = blue size = 4>和实验室同学一起搭建了一个板球系统，用两个舵机控制板的倾斜方向和程度, 用树莓派加摄像头读取小球位置，并通过串口传给单片机处理，使用PID算法控制小球位置</font><br><br><img src="http://fp1.fghrsh.net/2021/01/06/2ee3f03989c23ce0c8ad74bba6778013.jpg" alt="2ee3f03989c23ce0c8ad74bba6778013.jpg"><br></p><h5 id="四-基于STM32的自动泊车系统"><a href="#四-基于STM32的自动泊车系统" class="headerlink" title="四.基于STM32的自动泊车系统"></a>四.基于STM32的自动泊车系统</h5><p><font  color = blue size = 4>一个电赛练手题目，完成的还算比较好,就是小车底板上搭上超声波传感器和红外对管，最后加上MPU6050判断车体转角，在车道上加上红外漫反射开关即可完成自动泊车与按时计费</font><br><br><img src="http://fp1.fghrsh.net/2021/01/06/d86c9a369245c27a84a7ef40eef6d3d4.jpg" alt="d86c9a369245c27a84a7ef40eef6d3d4.jpg"><br></p><h5 id="五-基于STM32的智能物流机器人"><a href="#五-基于STM32的智能物流机器人" class="headerlink" title="五.基于STM32的智能物流机器人"></a>五.基于STM32的智能物流机器人</h5><p><font  color = blue size = 4>参加工程训练比赛的车,用的麦克纳姆轮可以在地图上进行平移，避免了转弯带来的误差，虽然最后只是拿到了省三，但还是学到了不少东西再次记录一下。</font><br></p><p><img src="http://fp1.fghrsh.net/2021/01/06/407e6ea9c530ce3a9af1606ded2cb902.jpg" alt="407e6ea9c530ce3a9af1606ded2cb902.jpg"></p><p><img src="http://fp1.fghrsh.net/2021/01/06/431e70a2264a9ac4ccf1ebad14be4060.jpg" alt="431e70a2264a9ac4ccf1ebad14be4060.jpg"><br></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于51单片机和DS18B20的自动控温小风扇</title>
      <link href="2021/01/05/%E5%9F%BA%E4%BA%8E51%E5%8D%95%E7%89%87%E6%9C%BA%E5%92%8CDS18B20%E7%9A%84%E8%87%AA%E5%8A%A8%E6%8E%A7%E6%B8%A9%E5%B0%8F%E9%A3%8E%E6%89%87/"/>
      <url>2021/01/05/%E5%9F%BA%E4%BA%8E51%E5%8D%95%E7%89%87%E6%9C%BA%E5%92%8CDS18B20%E7%9A%84%E8%87%AA%E5%8A%A8%E6%8E%A7%E6%B8%A9%E5%B0%8F%E9%A3%8E%E6%89%87/</url>
      
        <content type="html"><![CDATA[<h5 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h5><p><font  size = 4>学完单片机课程后的一次课程设计，也算是对自己学习的知识的一个应用,以前都是用C写的代码这次尝试使用汇编语言实现</font><br></p><h5 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h5><p><font color = blue size = 4>使用DS18B20进行环境温度测量,使用52单片机进行数据读取 <br> 利用PWM和LM298N模块进行风扇的调速(通过温度的变化来调整风速)<br>使用蓝牙通信,通过上位机设定所需维持温度</font><br></p><h5 id="DS18B20模块"><a href="#DS18B20模块" class="headerlink" title="DS18B20模块"></a>DS18B20模块<br></h5><p><font size = 4> DS18B20是常用的数字温度传感器，其输出的是数字信号，具有体积小，硬件开销低，抗干扰能力强，精度高的特点。其只需三条线即可工作</font><br><br><img src="http://fp1.fghrsh.net/2021/01/05/c8f479fce9b3182029fc2b8eb3ef98d1.png" alt="alt 文本"></p><h5 id="硬件搭建"><a href="#硬件搭建" class="headerlink" title="硬件搭建"></a>硬件搭建<br></h5><p><font color = blue size = 4>将各个模块焊接于洞洞板上 最终效果如下</font><br><br><img src="http://fp1.fghrsh.net/2021/01/05/90d77cb661f80ee3fbf00c93b44dbd2f.jpg" alt="alt 文本"></p><h5 id="软件搭建"><a href="#软件搭建" class="headerlink" title="软件搭建"></a>软件搭建<br></h5><p><font color = blue size = 4>第一次使用汇编写52的代码,非常不习惯啊</font><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line">T2CON EQU 0C8H</span><br><span class="line">T2MOD EQU 0C9H</span><br><span class="line">TR2 EQU T2CON.2</span><br><span class="line">TF2 EQU T2CON.7</span><br><span class="line">TL2 EQU 0CCH</span><br><span class="line">TH2 EQU 0CDH</span><br><span class="line">RCAP2L EQU 0CAH</span><br><span class="line">RCAP2H EQU 0CBH</span><br><span class="line">T2MODE EQU 0C9H</span><br><span class="line">TARGHT EQU 41H</span><br><span class="line">COUNTER EQU R3</span><br><span class="line">DS18DQ EQU P1.3   &#x2F;&#x2F;P1.3与DS18DQ等同，便于理解</span><br><span class="line">TEMPH EQU 29H       &#x2F;&#x2F;保存读出温度的低8位 </span><br><span class="line">TEMPL EQU 28H       &#x2F;&#x2F;保存读出温度的高8位 </span><br><span class="line">DS18FLAG EQU 40H  &#x2F;&#x2F;设置标志</span><br><span class="line">ORG 0000H</span><br><span class="line">;定时器0中断产生方波用</span><br><span class="line">LJMP START</span><br><span class="line">ORG 000BH</span><br><span class="line">LJMP WAVE</span><br><span class="line">START:MOV  30H,#00  &#x2F;&#x2F;设置初始值</span><br><span class="line">        MOV  31H,#00</span><br><span class="line">        MOV  32H,#00 </span><br><span class="line">START1:        </span><br><span class="line">        MOV TMOD,#21H</span><br><span class="line">        MOV TL1,#0F3H</span><br><span class="line">        MOV TH1,#0F3H</span><br><span class="line">        MOV PCON,#80H</span><br><span class="line">        CLR TI</span><br><span class="line">        MOV SCON,#50H  </span><br><span class="line">        </span><br><span class="line">START2:</span><br><span class="line">        MOV TL0,#000H  </span><br><span class="line">        MOV TH0,#0F9H</span><br><span class="line">        SETB TR0</span><br><span class="line">        SETB ET0</span><br><span class="line">        SETB EA;</span><br><span class="line">        LCALL  DS18_GF  &#x2F;&#x2F;设置DS18B20的工作方式</span><br><span class="line">START3: </span><br><span class="line">    LJMP  START3</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;初始化子程序</span><br><span class="line">DS18_START:  </span><br><span class="line">        PUSH   07H &#x2F;&#x2F;保存R7的值，防止改变R7的数值</span><br><span class="line">        SETB   DS18DQ  &#x2F;&#x2F;将数据线拉高</span><br><span class="line">        NOP    &#x2F;&#x2F;延时1us</span><br><span class="line">        CLR    DS18DQ  &#x2F;&#x2F;将数据线拉低</span><br><span class="line">        MOV    R7,#0   &#x2F;&#x2F;延时大约512us </span><br><span class="line">        DJNZ   R7,$</span><br><span class="line">        SETB   DS18DQ  &#x2F;&#x2F;将数据线拉高</span><br><span class="line">        MOV    R7,#40</span><br><span class="line">DS18_START1:        &#x2F;&#x2F;延时大约160us</span><br><span class="line">        JNB    DS18DQ,DS18_START2  &#x2F;&#x2F;检查DS18B20是否工作正常</span><br><span class="line">        DJNZ   R7,DS18_START1</span><br><span class="line">        SETB   DS18FLAG   &#x2F;&#x2F;工作不正常</span><br><span class="line">DS18_START2: </span><br><span class="line">        CLR   DS18FLAG</span><br><span class="line">        MOV    R7,#100 &#x2F;&#x2F;延时月200us</span><br><span class="line">        DJNZ   R7,$</span><br><span class="line">        POP    07H  &#x2F;&#x2F;恢复R7的值</span><br><span class="line">        RET</span><br><span class="line">&#x2F;&#x2F;设置DS18B20工作方式</span><br><span class="line">DS18_GF:</span><br><span class="line">        CLR  DS18FLAG &#x2F;&#x2F;清除标志</span><br><span class="line">        LCALL  DS18_START  &#x2F;&#x2F;调用初始化子程序</span><br><span class="line">        MOV  A,#0CCH  &#x2F;&#x2F;跳跃ROM指令</span><br><span class="line">        LCALL  DS18_SEND   &#x2F;&#x2F;</span><br><span class="line">        MOV    A,#4EH     &#x2F;&#x2F;向RAM写数据              </span><br><span class="line">        LCALL  DS18_SEND</span><br><span class="line">        MOV    A,#75  </span><br><span class="line">        LCALL  DS18_SEND</span><br><span class="line">        MOV  A,#0</span><br><span class="line">        LCALL  DS18_SEND</span><br><span class="line">        MOV  A,#7FH  &#x2F;&#x2F;设置工作方式</span><br><span class="line">        LCALL  DS18_SEND</span><br><span class="line">        CLR    DS18DQ  &#x2F;&#x2F;释放总线</span><br><span class="line">        LCALL  DELAY500US   &#x2F;&#x2F;延时500us </span><br><span class="line">        RET</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出转换温度命令</span><br><span class="line">CONVERT_TEMPERATURE:</span><br><span class="line">        LCALL  DS18_START &#x2F;&#x2F;调用初始化子程序</span><br><span class="line">        MOV    A,#0CCH    &#x2F;&#x2F;跳跃ROM指令          </span><br><span class="line">        LCALL DS18_SEND</span><br><span class="line">        MOV    A,#44H    &#x2F;&#x2F;温度转换         </span><br><span class="line">        LCALL  DS18_SEND</span><br><span class="line">        RET</span><br><span class="line">&#x2F;&#x2F;读温度数据</span><br><span class="line">GET_TEMPERATURE:</span><br><span class="line">        LCALL  DS18_START &#x2F;&#x2F;调用初始化子程序</span><br><span class="line">        MOV    A,#0CCH  &#x2F;&#x2F;跳跃ROM指令                 </span><br><span class="line">        LCALL  DS18_SEND</span><br><span class="line">        MOV    A,#0BEH   &#x2F;&#x2F;从RAM中的数据           </span><br><span class="line">        LCALL  DS18_SEND</span><br><span class="line">        LCALL  DELAY60US</span><br><span class="line">        LCALL  DS18_READ</span><br><span class="line">        MOV    TEMPL,A   &#x2F;&#x2F;将获得数据的低八位存到TEMPL</span><br><span class="line">        LCALL  DS18_READ</span><br><span class="line">        MOV    TEMPH,A  &#x2F;&#x2F;将获得数据的高八位存到TEMPH</span><br><span class="line">        CLR    DS18DQ   &#x2F;&#x2F;即复位。否则会一直读到</span><br><span class="line">        LCALL DELAY501US &#x2F;&#x2F;暂存第九字节              </span><br><span class="line">        RET</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;计算获得温度值，便于现实</span><br><span class="line">CAL_TEMPERATURE:</span><br><span class="line">        PUSH   07H    &#x2F;&#x2F;暂存，防止改变R7的数据</span><br><span class="line">        CLR    C    &#x2F;&#x2F;进位标志清零</span><br><span class="line">        MOV    R7,#04H  &#x2F;&#x2F;循环次数</span><br><span class="line"></span><br><span class="line">EX2:MOV    A,TEMPH &#x2F;&#x2F; 这些语句的作用是：</span><br><span class="line">        RRC    A  &#x2F;&#x2F; 整数位在：TEMPL中</span><br><span class="line">        MOV    TEMPH,A &#x2F;&#x2F;?数位在：TEMPH中的高半</span><br><span class="line">        MOV    A,TEMPL</span><br><span class="line">        RRC    A</span><br><span class="line">        MOV    TEMPL,A</span><br><span class="line">        DJNZ   R7,EX2 &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">        MOV    A,TEMPH  &#x2F;&#x2F;</span><br><span class="line">        RLC    A   &#x2F;&#x2F;这些语句的作用是：</span><br><span class="line">        RLC    A   &#x2F;&#x2F;把TEMPH得高半移到低四位中</span><br><span class="line">        RLC    A</span><br><span class="line">        RLC    A  &#x2F;&#x2F;</span><br><span class="line">        ANL    A,#0FH &#x2F;&#x2F;屏蔽高四位，保留低四位</span><br><span class="line">        MOV    DPTR,#TAB_TEMP &#x2F;&#x2F;赋带?数点的数值表的表首地址</span><br><span class="line">        MOVC   A,@A+DPTR</span><br><span class="line">        MOV    30H,A  &#x2F;&#x2F;暂存该值，用于显示</span><br><span class="line">        MOV    A,TEMPL</span><br><span class="line">        CLR    C</span><br><span class="line">        MOV    B,#0AH</span><br><span class="line">        DIV    AB  &#x2F;&#x2F;分离整数位的高低四位</span><br><span class="line">        MOV    32H,A  &#x2F;&#x2F;暂存十位</span><br><span class="line">        MOV    A,B</span><br><span class="line">        ADD    A,#10H</span><br><span class="line">        MOV    31H,A  &#x2F;&#x2F;暂存个位</span><br><span class="line">        POP    07H    &#x2F;&#x2F;恢复R7的值</span><br><span class="line">        RET</span><br><span class="line">&#x2F;&#x2F;写数据子程序</span><br><span class="line">DS18_SEND:   </span><br><span class="line">        PUSH   06H  &#x2F;&#x2F;保护Rn的值</span><br><span class="line">        PUSH   07H</span><br><span class="line">        &#x2F;&#x2F;以下语句是&quot;写 笔毙虻脑?</span><br><span class="line">        SETB   DS18DQ  &#x2F;&#x2F;写时序是有DS18DQ的下降沿决定</span><br><span class="line">        NOP     &#x2F;&#x2F;延时1us</span><br><span class="line">        MOV    R6,#08H  &#x2F;&#x2F;循环次数，一个字节</span><br><span class="line">DS18_SEND1:</span><br><span class="line">        CLR     DS18DQ  &#x2F;&#x2F;拉低，产生下降沿</span><br><span class="line">        MOV     R7,#07  &#x2F;&#x2F;延时大约15us</span><br><span class="line">        DJNZ    R7,$</span><br><span class="line">        RRC     A  &#x2F;&#x2F;把要写入得数据的高位移到C中</span><br><span class="line">        MOV     DS18DQ,C   &#x2F;&#x2F;再把C的值赋给DS18DQ</span><br><span class="line">        MOV     R7,#30    &#x2F;&#x2F;延时时间约为60us，只要大约45us即可</span><br><span class="line">        DJNZ    R7,$</span><br><span class="line">        SETB    DS18DQ   &#x2F;&#x2F;拉高准备，下次产生下降沿</span><br><span class="line">        DJNZ    R6,DS18_SEND1 &#x2F;&#x2F;判断循环次数够了没</span><br><span class="line">        POP     07H   &#x2F;&#x2F;恢复Rn的数据</span><br><span class="line">        POP     06H</span><br><span class="line">        RET</span><br><span class="line">&#x2F;&#x2F;读数据子程序</span><br><span class="line">DS18_READ:   </span><br><span class="line">        PUSH    06H   &#x2F;&#x2F; 保护Rn的值</span><br><span class="line">        PUSH    07H</span><br><span class="line">        &#x2F;&#x2F;以下为 岸?钡氖毙?</span><br><span class="line">        SETB    DS18DQ &#x2F;&#x2F;拉高，准备产生下降沿</span><br><span class="line">        MOV     R6,#08H  &#x2F;&#x2F;循环次数</span><br><span class="line">        CLR     A  &#x2F;&#x2F;A清零，准备装值</span><br><span class="line">DS18_READ1:</span><br><span class="line">        CLR     DS18DQ &#x2F;&#x2F;拉低，产生下降沿</span><br><span class="line">        NOP     &#x2F;&#x2F;延时2us，其实有没有都没有什么关系</span><br><span class="line">        NOP</span><br><span class="line">        SETB    DS18DQ &#x2F;&#x2F;释放总线</span><br><span class="line">        MOV     R7,#07H  &#x2F;&#x2F;等待15us</span><br><span class="line">        DJNZ    R7,$</span><br><span class="line">        MOV     C,DS18DQ  &#x2F;&#x2F;获?数据</span><br><span class="line">        RRC     A        &#x2F;&#x2F;将获得数据存到A中                   </span><br><span class="line">        MOV     R7,#30 &#x2F;&#x2F;延时60us</span><br><span class="line">        DJNZ    R7,$</span><br><span class="line">        SETB    DS18DQ   &#x2F;&#x2F;拉高，准备下次产生下降沿</span><br><span class="line">        DJNZ    R6,DS18_READ1</span><br><span class="line">        POP     07H  &#x2F;&#x2F;恢复Rn的</span><br><span class="line">        POP     06H</span><br><span class="line">        RET</span><br><span class="line"></span><br><span class="line">DISPLAY:</span><br><span class="line">        XCH  A,R1</span><br><span class="line">        MOV A,#0AH</span><br><span class="line">        MOV B,32H</span><br><span class="line">        MUL AB </span><br><span class="line">        ADD A,31H</span><br><span class="line">        MOV 33H,A</span><br><span class="line">        MOV TARGHT,33H</span><br><span class="line">        XCH  A,R1</span><br><span class="line">        RET</span><br><span class="line">WAVE:</span><br><span class="line">        CLR EA</span><br><span class="line">        LCALL  CONVERT_TEMPERATURE &#x2F;&#x2F;调用转子程序</span><br><span class="line">        MOV    R5,#80</span><br><span class="line">LOOP1:LCALL  DISPLAY &#x2F;&#x2F;调用显示防止掉显，同时等待转换完成</span><br><span class="line">        DJNZ   R5,LOOP1</span><br><span class="line">        LCALL  GET_TEMPERATURE  &#x2F;&#x2F;获?转换值</span><br><span class="line">        LCALL  CAL_TEMPERATURE &#x2F;&#x2F;计算温度值</span><br><span class="line"></span><br><span class="line">        MOV SBUF,R1;发送温度到串口4800</span><br><span class="line">        JNB TI,$</span><br><span class="line">        CLR TI</span><br><span class="line">        CJNE COUNTER,#30H, ZGENGSHU</span><br><span class="line">        MOV COUNTER,#25H</span><br><span class="line">        CLR TF0</span><br><span class="line">        MOV TL0,#000H  </span><br><span class="line">        MOV TH0,#0D9H</span><br><span class="line">        SETB EA</span><br><span class="line">        RETI</span><br><span class="line">FUSHU:</span><br><span class="line">        SETB P2.0</span><br><span class="line">        CLR TF0</span><br><span class="line">        MOV TL0,#000H  </span><br><span class="line">        MOV TH0,#0D9H</span><br><span class="line">        SETB EA</span><br><span class="line">        RETI</span><br><span class="line">ZGENGSHU:</span><br><span class="line">        INC COUNTER</span><br><span class="line">        MOV A,COUNTER</span><br><span class="line">        SUBB A,TARGHT</span><br><span class="line">        JB ACC.7, FUSHU</span><br><span class="line">        CLR P2.0  </span><br><span class="line">        CLR TF0</span><br><span class="line">        MOV TL0,#000H  </span><br><span class="line">        MOV TH0,#0D9H</span><br><span class="line">        SETB EA</span><br><span class="line">        RETI</span><br></pre></td></tr></table></figure><p><font color = blue size = 4>最后完成这次课设,模拟了大棚的调温系统,但是这只是简单的模拟,和真正的控温系统差的还是很远…..</font><br></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STC52 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于51单片机和DS1302的定时小风扇</title>
      <link href="2021/01/05/%E5%9F%BA%E4%BA%8E51%E5%8D%95%E7%89%87%E6%9C%BA%E5%92%8CDS1302%E7%9A%84%E5%AE%9A%E6%97%B6%E5%B0%8F%E9%A3%8E%E6%89%87/"/>
      <url>2021/01/05/%E5%9F%BA%E4%BA%8E51%E5%8D%95%E7%89%87%E6%9C%BA%E5%92%8CDS1302%E7%9A%84%E5%AE%9A%E6%97%B6%E5%B0%8F%E9%A3%8E%E6%89%87/</url>
      
        <content type="html"><![CDATA[<h5 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h5><p><font  size = 4>刚来西科大时还没有装空调，夏天晚上只能用风扇‘帮助’睡眠,但是风扇开一晚上又容易着凉,所以想着搞一个可以定时调速的小风扇</font><br></p><h5 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h5><p><font color = blue size = 4>使用DS1302进行时间记录,使用52单片机进行数据读取 <br> 设置4个按键分别控制风速的加减和定时时间的加减<br>利用7个led灯显示定时时间(每灯表示半小时)<br>利用PWM和LM298N模块进行风扇的调速</font><br></p><h5 id="DS1302芯片"><a href="#DS1302芯片" class="headerlink" title="DS1302芯片"></a>DS1302芯片<br></h5><p><font size = 4> DS1302 是 DALLAS 公司推出的涓流充电时钟芯片 内含有一个实时时钟和 31 字节静态 RAM 通过简单的串行接口与单片机进行通信 实时时钟电路提供秒 分 时 日 日期 月 年的信息 每月的天数和闰年的天数可自动调整 时钟操作可通过 AM/PM 指示决定采用 24 或 12 小时格式 DS1302 与单片机之间能简单地采用同步串行的方式进行通信 仅需用到三个口线 1 RES 复位 2 I/O 数据线 3 SCLK串行时钟 时钟/RAM 的读/写数据以一个字节或多达 31 个字节的字符组方式通信 DS1302 工作时功耗很低 保持数据和时钟信息时功率小于 1mW</font><br><br><img src="http://fp1.fghrsh.net/2021/01/05/1e22fd811a86f5f3fa0ddc98d02be557.png" alt="alt 文本"></p><h5 id="硬件搭建"><a href="#硬件搭建" class="headerlink" title="硬件搭建"></a>硬件搭建<br></h5><p><font color = blue size = 4>通过一下午的布线 焊接 最终硬件搭建效果如下 感觉还不错，准备直接挂在床头，用两节18650电池供电</font><br><br><img src="http://fp1.fghrsh.net/2021/01/05/cd5b5b8bd539429642c1e82bd390fac3.jpg" alt="alt 文本"></p><h5 id="软件搭建"><a href="#软件搭建" class="headerlink" title="软件搭建"></a>软件搭建<br></h5><p><font color = blue size = 4>年代久远代码找不到了……</font><br></p><h6 id="至此-终于拥有一个可以陪我度过夏天的定时调速的小风扇了"><a href="#至此-终于拥有一个可以陪我度过夏天的定时调速的小风扇了" class="headerlink" title="至此,终于拥有一个可以陪我度过夏天的定时调速的小风扇了"></a>至此,终于拥有一个可以陪我度过夏天的定时调速的小风扇了</h6>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STC52 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32小玩意</title>
      <link href="2021/01/05/%E5%9F%BA%E4%BA%8EESP32%E7%9A%84%E5%B0%8F%E7%8E%A9%E6%84%8F/"/>
      <url>2021/01/05/%E5%9F%BA%E4%BA%8EESP32%E7%9A%84%E5%B0%8F%E7%8E%A9%E6%84%8F/</url>
      
        <content type="html"><![CDATA[<h5 id="基于ESP32的单色OLED播放器"><a href="#基于ESP32的单色OLED播放器" class="headerlink" title="基于ESP32的单色OLED播放器"></a>基于ESP32的单色OLED播放器<br></h5><p><font color = blue size = 4>  使用opencv处理源视频(切片+转灰度图),最终按照oled的显存格式写入oled。由于ESP32自身内存小,故视频源文件应使用网络IO或SD卡IO进行传输</font><br><br><font color = red size = 4>  ESP端</font> <br><br><img src="http://fp1.fghrsh.net/2021/01/05/60df43d554651f94a2ba995b8b203294.png" alt="alt 文本" title="ESP端"><br><br><font color = red size = 4>  PC端</font> <br><br><img src="http://fp1.fghrsh.net/2021/01/05/6ae2a3a09019ae5efd3f315b914a8b1c.png" alt="alt 文本" title="PC端"><br></p><p><font  color = red size = 4>最终效果放B站上了</font><br></p><iframe         width="400"     height="200"      src="//player.bilibili.com/player.html?aid=671111264&bvid=BV1zU4y1x71X&cid=277597252&page=1"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     allowfullscreen="true"> </iframe><h5 id="基于ESP32的天气预报装置"><a href="#基于ESP32的天气预报装置" class="headerlink" title="基于ESP32的天气预报装置"></a>基于ESP32的天气预报装置<br></h5><p><font color = blue size = 4>  使用京东的天气API并使用ESP32访问该API，解析返回json文件得到天气数据,显示在TFT彩屏上</font>    <br><br><img src="http://fp1.fghrsh.net/2021/01/05/271fda81053f08c03bac155fb58a42b8.png" alt="alt 文本"></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ESP32的2.8寸彩屏驱动</title>
      <link href="2021/01/05/ESP32%E4%B8%8A%E7%9A%84ILI%E5%B1%8F%E5%B9%95%E9%A9%B1%E5%8A%A8/"/>
      <url>2021/01/05/ESP32%E4%B8%8A%E7%9A%84ILI%E5%B1%8F%E5%B9%95%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h5 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h5><p><font size = 4>  这快2.8寸TFT彩屏是从淘宝买的,分辨率320*240 驱动是ILI9341 接口是SPI,网上找到了32上跑的驱动代码,但是并没有找到ESP的驱动代码,准备自己写一个ESP32使用的ILI9341驱动和一些简单的画图接口</font></p><h5 id="屏幕初始化"><a href="#屏幕初始化" class="headerlink" title="屏幕初始化"></a>屏幕初始化</h5><p><font size = 4>  这个比较容易实现,现在已经有基于stm32的屏幕驱动,可以直接将C代码用python语法重写一遍即可</font><br><br>    #——————————–初始化即底层代码(部分)——————————————–#<br>    def <strong>init</strong>(self, spi, cs, dc, rst, w, h, r):<br>        self.spi = spi<br>        self.cs = cs<br>        self.dc = dc<br>        self.rst = rst<br>        self.init_width = w<br>        self.init_height = h<br>        self.width = w<br>        self.height = h<br>        self.rotation = r<br>        self.cs.init(self.cs.OUT, value=1)<br>        self.dc.init(self.dc.OUT, value=0)<br>        self.rst.init(self.rst.OUT, value=0)<br>        self.reset()<br>        self.init()<br>    ……………………………………….<br>    def reset(self):<br>        self.rst(0)<br>        time.sleep_ms(50)<br>        self.rst(1)<br>        time.sleep_ms(50)<br>    #写数据<br>    def data(self, data):<br>        self.dc(1)<br>        self.cs(0)<br>        self.spi.write(data)<br>        self.cs(1)<br>    #写命令<br>    def command(self, command):<br>        self.dc(0)<br>        self.cs(0)<br>        self.spi.write(bytearray([command]))<br>        self.cs(1)<br>    #写入块<br>    def writeblock(self, x0, y0, x1, y1):<br>        self.command(CASET)# 列地址设置<br>        self.data(struct.pack(“&gt;HH”, x0, x1))<br>        self.command(PASET)# 页地址设置<br>        self.data(struct.pack(“&gt;HH”, y0, y1))<br>        self.command(RAMWR)# 内存写入<br>    #读取块，返回<br>    def readblock(self, x0, y0, x1, y1):<br>        self.command(CASET)# 列地址设置<br>        self.data(struct.pack(“&gt;HH”, x0, x1))<br>        self.command(PASET)# 页地址设置<br>        self.data(struct.pack(“&gt;HH”, y0, y1))<br>        self.command(RAMRD)# 内存读出<br>        data = self.spi.read((x1 - x0 + 1) * (y1 - y0 + 1) * 3)<br>        return data<br>    #———————————————————————————————#</p><h5 id="添加基本绘图接口"><a href="#添加基本绘图接口" class="headerlink" title="添加基本绘图接口"></a>添加基本绘图接口</h5><p><font size = 4>  利用micro python固件提供的FrameBuffer类,重写该类方法，可以大大节省时间,在ESP内存中创建一个缓冲区，将要写入显存的数据先写入FrameBuffer,最终在show方法中将缓冲区数据通过SPI写入显存</font><br><font color = red size = 4> 注意!这块2.8寸屏的分辨率为320<em>240,而且数据格式为RGB565,即一个像素点需要16个bit,共需要320</em>240*16bit空间，对于ESP32肯定不能一次性写入显存(内存不足),应该多创建几次FrameBuffer分批写入比较合理</font></p><h6 id="1-画点"><a href="#1-画点" class="headerlink" title="1.画点"></a>1.画点</h6><pre><code>def pixel(self,x,y,c = 0xffff):    self.getbuffer(x,y,1,1)    self.fb.pixel(0,0,c)    </code></pre><h6 id="2-画线"><a href="#2-画线" class="headerlink" title="2.画线"></a>2.画线</h6><pre><code>def line(self,x1,y1,x2,y2,c = 0xffff):    w = x2-x1    h = y2-y1    self.getbuffer(x1,y1,w,h)    self.fb.line(0,0,w,h,c)    self.show()</code></pre><h6 id="3-画矩形"><a href="#3-画矩形" class="headerlink" title="3.画矩形"></a>3.画矩形</h6><pre><code>def rect(self,x,y,w,h,c = 0xffff):    self.getbuffer(x,y,w,h)    self.fb.rect(0,0,w,h,c)    self.show()</code></pre><h6 id="4-填充、擦除、斜线等绘图接口"><a href="#4-填充、擦除、斜线等绘图接口" class="headerlink" title="4.填充、擦除、斜线等绘图接口"></a>4.填充、擦除、斜线等绘图接口</h6><p><font size = 4> 详见<a href="https://github.com/lyzp">个人github</a></font></p><h5 id="添加高级绘图接口"><a href="#添加高级绘图接口" class="headerlink" title="添加高级绘图接口 "></a>添加高级绘图接口 <br></h5><h6 id="1-显示图片"><a href="#1-显示图片" class="headerlink" title="1.显示图片"></a>1.显示图片</h6><pre><code>#---------------------------------实现图片(数组)显示由SD卡或网络传输--------------------------------##x,y图片起始显示位置#pic_w,pic_h图片宽高#图片文件的路径def bitmap(self,x,y,pic_w,pic_h,file_name):    lines = 6    block = pic_w * lines * 2    nums = (pic_w * pic_h * 2) // block    with open(file_name,&#39;rb&#39;) as fio:      for v in range(nums):        self.getbuffer(x ,y+v*lines, pic_w ,lines)        self.buf = fio.read(block)        self.show()#实现网络传输图片def bitmap_net(self,sock):    lines = 6    x = int(sock.recv(10))    sock.send(b&#39;s&#39;)    y = int(sock.recv(10))    sock.send(b&#39;s&#39;)    pic_w = int(sock.recv(10))    sock.send(b&#39;s&#39;)    pic_h = int(sock.recv(10))    sock.send(b&#39;s&#39;)    block = pic_w * lines * 2    nums = (pic_w * pic_h * 2) // block    for v in range(nums):      self.getbuffer(x ,y+v*lines, pic_w ,lines)      self.buf = sock.recv(block)      self.show()      time.sleep_ms(100)#延时等待刷新#---------------------------------------------------------------------------------------------#</code></pre><h6 id="2-显示字符"><a href="#2-显示字符" class="headerlink" title="2.显示字符"></a>2.显示字符</h6><pre><code>#--------------------------------字符输入自动换行支持所有字符的输入--------------------------------#        #功能：传入黑白字库文件，支持自定义字体颜色，速度较慢def print(self,str,xstart,ystart,fg = 0xffff,bg = 0x0000,font_path=&quot;/sd/utf16.zk&quot;,size=16):    def hex2bin(g):#将传入的颜色转为字节串      s = hex(g).replace(&quot;0x&quot;,&quot;&quot;)      while len(s)&lt;4:s = &#39;0&#39; + s#补全为四位      return bytearray([int(s[0:2],16),int(s[2:4],16)])    _fg = hex2bin(fg)    #前景色    _bg = hex2bin(bg)    #背景色    pos_y = ystart    charbytes = int((size**2)/8)#一个字符的所占的字节数，是跳转字库指针的最小单位     n = -1#字符计数器，表示当前显示的字符    max = int(240/size)-1    with open(font_path,&#39;rb&#39;) as f:#打开字库      for c in str:#分割字符串为字符        n = n + 1        v = 0#写入buf的计数器，每显示一个字符清零        f.seek(ord(c)*charbytes)#跳转到字符c的位置        chr_num = f.read(charbytes)#读取字符c,返回此字符对应的点阵数据        pos_x = xstart + size * n #y的位置为起始值加上n个字符size        if pos_x &gt;= 240 - 1.1 * size:#如果当前超出行          pos_y = pos_y + size#y位置向下偏移一个size&lt;换行&gt;          pos_x = xstart          n = -1        self.getbuffer(pos_x,pos_y,size,size)#每次显示一个字符        for byte in chr_num:#分割一个字符点阵数据为字节，并将整个字符入self.buf等待显示          x = bin(byte).replace(&#39;0b&#39;,&#39;&#39;)          while len(x)&lt;8:#补全为8位            x = &#39;0&#39; + x          for r in x:#将黑白字符转为彩色字符放在self.buf中            if r == &#39;0&#39;:              self.buf[0+2*v:2+2*v] = _bg            else:              self.buf[0+2*v:2+2*v] = _fg            v = v + 1        self.show()#显示一个字符#功能：直接传入转化好的RGB565字库,不可改颜色，但速度更快    def printf(self,str,xstart,ystart,font_path=&quot;/sd/utf16.fzk&quot;,size=16):    charbytes = int((size**2)*2)#一个字符的所占的字节数，是跳转字库指针的最小单位     n = -1    pos_y = ystart    max = int(240/size)-1    with open(font_path,&#39;rb&#39;) as f:#打开字库      for c in str:#分割字符串为字符        n = n + 1        pos_x = xstart + size * n #y的位置为起始值加上n个字符size        if pos_x &gt;= 240 - 1.1 * size:#如果当前y位置超出屏幕          pos_y = pos_y + size#x位置向下偏移一个size&lt;换行&gt;          pos_x = xstart          n = -1        self.getbuffer(pos_x,pos_y,size,size)#每次显示一个字符        f.seek(ord(c)*charbytes)#跳转到字符c的位置        self.buf = f.read(charbytes)#读取字符c,返回此字符对应的点阵数据        self.show()#显示一个字符#---------------------------------------------------------------------------------------------#</code></pre><p><font color = bule size = 4> 字库文件通过取模软件生成,并将其格式处理为RGB65 存于内存卡中</font><br><font size = 4> 实现代码如下:</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">old = <span class="string">r&#x27;C:\Users\liu\Desktop\22.DZK&#x27;</span></span><br><span class="line">new = <span class="string">r&#x27;C:\Users\liu\Desktop\utf.zk&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(old,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(new,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            a = fd.read(<span class="number">32</span>)</span><br><span class="line">            <span class="keyword">for</span> w <span class="keyword">in</span> a:</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                x = <span class="built_in">bin</span>(w).replace(<span class="string">&#x27;0b&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">while</span> <span class="built_in">len</span>(x)&lt;<span class="number">8</span>:</span><br><span class="line">                    x = <span class="string">&#x27;0&#x27;</span> + x</span><br><span class="line">                <span class="keyword">for</span> r <span class="keyword">in</span> x:</span><br><span class="line">                    <span class="keyword">if</span> r == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                        f.write(<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        f.write(<span class="string">b&#x27;\xff\xff&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h5><p><img src="http://fp1.fghrsh.net/2021/01/05/86506395cd7b7506fd90782817c964cd.png" alt="alt 文本"></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建ESP开发板</title>
      <link href="2021/01/05/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAESP%E5%BC%80%E5%8F%91%E6%9D%BF/"/>
      <url>2021/01/05/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAESP%E5%BC%80%E5%8F%91%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h5 id="所需工具😎"><a href="#所需工具😎" class="headerlink" title="所需工具😎"></a>所需工具😎</h5><p><font size = 4>  电烙铁 手</font></p><h5 id="购买模块"><a href="#购买模块" class="headerlink" title="购买模块"></a>购买模块</h5><p><font size = 4>  洞洞板 ESP32最小系统板 0.96OLED 2.8寸TFT彩屏 排针排母若干 各类电源接口</font><br><img src="http://fp1.fghrsh.net/2021/01/05/4b1886b53da9a6828765d02253fdb094.md.png" alt="alt 文本"></p><h5 id="最终成果"><a href="#最终成果" class="headerlink" title="最终成果"></a>最终成果</h5><p><font size = 4>  洞洞板出来的板子效果不大好，但是可以正常使用</font><br><img src="http://fp1.fghrsh.net/2021/01/05/13a52db047b0058c023f5b6ceac16384.png" alt="alt 文本"></p><h5 id="安装开发软件"><a href="#安装开发软件" class="headerlink" title="安装开发软件"></a>安装开发软件</h5><p><font size = 4>  uPyCraft是一个micropython的代码编辑器，可以使用串口直接连接ESP32</font><br><img src="http://fp1.fghrsh.net/2021/01/05/453ba8508d1952baae1d76f8777631cb.jpg" alt="alt 文本"></p><h5 id="烧录ESP32固件"><a href="#烧录ESP32固件" class="headerlink" title="烧录ESP32固件"></a>烧录ESP32固件</h5><p><font size = 4>  由于准备使用micropython固件,所以第一步先去micropython官网下载esp32的固件包,之后在使用uPyCraft将固件烧录到ESP32内</font><br><img src="http://fp1.fghrsh.net/2021/01/05/73b8fab28b6935ed33bff39df55d10b3.png" alt="alt 文本"></p><h5 id="至此ESP32开发板已经初步完成"><a href="#至此ESP32开发板已经初步完成" class="headerlink" title="至此ESP32开发板已经初步完成"></a>至此ESP32开发板已经初步完成</h5><p><img src="http://fp1.fghrsh.net/2021/01/05/4f79123d4b77f258164a8b0fd8aa47d9.png" alt="alt 文本"></p><h5 id="下一步准备在写一个ESP32的ILI屏幕驱动-一会见ヾ-≧▽≦-o"><a href="#下一步准备在写一个ESP32的ILI屏幕驱动-一会见ヾ-≧▽≦-o" class="headerlink" title="下一步准备在写一个ESP32的ILI屏幕驱动,一会见ヾ(≧▽≦*)o"></a>下一步准备在写一个ESP32的ILI屏幕驱动,一会见ヾ(≧▽≦*)o</h5>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
  
</search>
