<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于51单片机和DS18B20的自动控温小风扇</title>
      <link href="2021/01/05/%E5%9F%BA%E4%BA%8E51%E5%8D%95%E7%89%87%E6%9C%BA%E5%92%8CDS18B20%E7%9A%84%E8%87%AA%E5%8A%A8%E6%8E%A7%E6%B8%A9%E5%B0%8F%E9%A3%8E%E6%89%87/"/>
      <url>2021/01/05/%E5%9F%BA%E4%BA%8E51%E5%8D%95%E7%89%87%E6%9C%BA%E5%92%8CDS18B20%E7%9A%84%E8%87%AA%E5%8A%A8%E6%8E%A7%E6%B8%A9%E5%B0%8F%E9%A3%8E%E6%89%87/</url>
      
        <content type="html"><![CDATA[<h5 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h5><p><font  size = 4>学完单片机课程后的一次课程设计，也算是对自己学习的知识的一个应用,以前都是用C写的代码这次尝试使用汇编语言实现</font><br></p><h5 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h5><p><font color = blue size = 4>使用DS18B20进行环境温度测量,使用52单片机进行数据读取 <br> 利用PWM和LM298N模块进行风扇的调速(通过温度的变化来调整风速)<br>使用蓝牙通信,通过上位机设定所需维持温度</font><br></p><h5 id="DS18B20模块"><a href="#DS18B20模块" class="headerlink" title="DS18B20模块"></a>DS18B20模块<br></h5><p><font size = 4> DS18B20是常用的数字温度传感器，其输出的是数字信号，具有体积小，硬件开销低，抗干扰能力强，精度高的特点。其只需三条线即可工作</font><br><br><img src="http://fp1.fghrsh.net/2021/01/05/c8f479fce9b3182029fc2b8eb3ef98d1.png" alt="alt 文本"></p><h5 id="硬件搭建"><a href="#硬件搭建" class="headerlink" title="硬件搭建"></a>硬件搭建<br></h5><p><font color = blue size = 4>将各个模块焊接于洞洞板上 最终效果如下</font><br><br><img src="http://fp1.fghrsh.net/2021/01/05/90d77cb661f80ee3fbf00c93b44dbd2f.jpg" alt="alt 文本"></p><h5 id="软件搭建"><a href="#软件搭建" class="headerlink" title="软件搭建"></a>软件搭建<br></h5><p><font color = blue size = 4>第一次使用汇编写52的代码,非常不习惯啊</font><br><br>    T2CON EQU 0C8H<br>    T2MOD EQU 0C9H<br>    TR2 EQU T2CON.2<br>    TF2 EQU T2CON.7<br>    TL2 EQU 0CCH<br>    TH2 EQU 0CDH<br>    RCAP2L EQU 0CAH<br>    RCAP2H EQU 0CBH<br>    T2MODE EQU 0C9H<br>    TARGHT EQU 41H<br>    COUNTER EQU R3<br>    DS18DQ EQU P1.3   //P1.3与DS18DQ等同，便于理解<br>    TEMPH EQU 29H       //保存读出温度的低8位<br>    TEMPL EQU 28H       //保存读出温度的高8位<br>    DS18FLAG EQU 40H  //设置标志<br>    ORG 0000H<br>    ;定时器0中断产生方波用<br>    LJMP START<br>    ORG 000BH<br>    LJMP WAVE<br>    START:    MOV  30H,#00  //设置初始值<br>            MOV  31H,#00<br>            MOV  32H,#00<br>    START1:<br>            MOV TMOD,#21H<br>            MOV TL1,#0F3H<br>            MOV TH1,#0F3H<br>            MOV PCON,#80H<br>            CLR TI<br>            MOV SCON,#50H      </p><pre><code>START2:        MOV TL0,#000H          MOV TH0,#0F9H        SETB TR0        SETB ET0            SETB EA;            LCALL  DS18_GF  //设置DS18B20的工作方式START3:     LJMP  START3//初始化子程序DS18_START:          PUSH   07H //保存R7的值，防止改变R7的数值        SETB   DS18DQ  //将数据线拉高        NOP    //延时1us        CLR    DS18DQ  //将数据线拉低        MOV    R7,#0   //延时大约512us         DJNZ   R7,$        SETB   DS18DQ  //将数据线拉高        MOV    R7,#40DS18_START1:        //延时大约160us        JNB    DS18DQ,DS18_START2  //检查DS18B20是否工作正常        DJNZ   R7,DS18_START1        SETB   DS18FLAG   //工作不正常DS18_START2:         CLR   DS18FLAG        MOV    R7,#100 //延时月200us        DJNZ   R7,$        POP    07H  //恢复R7的值        RET//设置DS18B20工作方式DS18_GF:        CLR  DS18FLAG //清除标志        LCALL  DS18_START  //调用初始化子程序        MOV  A,#0CCH  //跳跃ROM指令        LCALL  DS18_SEND   //        MOV    A,#4EH     //向RAM写数据                      LCALL  DS18_SEND        MOV    A,#75          LCALL  DS18_SEND        MOV  A,#0        LCALL  DS18_SEND        MOV  A,#7FH  //设置工作方式        LCALL  DS18_SEND        CLR    DS18DQ  //释放总线        LCALL  DELAY500US   //延时500us         RET//输出转换温度命令CONVERT_TEMPERATURE:        LCALL  DS18_START //调用初始化子程序        MOV    A,#0CCH    //跳跃ROM指令                  LCALL DS18_SEND        MOV    A,#44H    //温度转换                 LCALL  DS18_SEND        RET//读温度数据GET_TEMPERATURE:        LCALL  DS18_START //调用初始化子程序        MOV    A,#0CCH  //跳跃ROM指令                         LCALL  DS18_SEND        MOV    A,#0BEH   //从RAM中的数据                   LCALL  DS18_SEND        LCALL  DELAY60US        LCALL  DS18_READ        MOV    TEMPL,A   //将获得数据的低八位存到TEMPL        LCALL  DS18_READ        MOV    TEMPH,A  //将获得数据的高八位存到TEMPH        CLR    DS18DQ   //即复位。否则会一直读到        LCALL DELAY501US //暂存第九字节                      RET//计算获得温度值，便于现实CAL_TEMPERATURE:        PUSH   07H    //暂存，防止改变R7的数据        CLR    C    //进位标志清零        MOV    R7,#04H  //循环次数EX2:    MOV    A,TEMPH // 这些语句的作用是：        RRC    A  // 整数位在：TEMPL中        MOV    TEMPH,A //?数位在：TEMPH中的高半        MOV    A,TEMPL        RRC    A        MOV    TEMPL,A        DJNZ   R7,EX2 //        MOV    A,TEMPH  //        RLC    A   //这些语句的作用是：        RLC    A   //把TEMPH得高半移到低四位中        RLC    A        RLC    A  //        ANL    A,#0FH //屏蔽高四位，保留低四位        MOV    DPTR,#TAB_TEMP //赋带?数点的数值表的表首地址        MOVC   A,@A+DPTR        MOV    30H,A  //暂存该值，用于显示        MOV    A,TEMPL        CLR    C        MOV    B,#0AH        DIV    AB  //分离整数位的高低四位        MOV    32H,A  //暂存十位        MOV    A,B        ADD    A,#10H        MOV    31H,A  //暂存个位        POP    07H    //恢复R7的值        RET//写数据子程序DS18_SEND:           PUSH   06H  //保护Rn的值        PUSH   07H        //以下语句是&quot;写 笔毙虻脑?        SETB   DS18DQ  //写时序是有DS18DQ的下降沿决定        NOP     //延时1us        MOV    R6,#08H  //循环次数，一个字节DS18_SEND1:        CLR     DS18DQ  //拉低，产生下降沿        MOV     R7,#07  //延时大约15us        DJNZ    R7,$        RRC     A  //把要写入得数据的高位移到C中        MOV     DS18DQ,C   //再把C的值赋给DS18DQ        MOV     R7,#30    //延时时间约为60us，只要大约45us即可        DJNZ    R7,$        SETB    DS18DQ   //拉高准备，下次产生下降沿        DJNZ    R6,DS18_SEND1 //判断循环次数够了没        POP     07H   //恢复Rn的数据        POP     06H        RET//读数据子程序DS18_READ:           PUSH    06H   // 保护Rn的值        PUSH    07H        //以下为 岸?钡氖毙?        SETB    DS18DQ //拉高，准备产生下降沿        MOV     R6,#08H  //循环次数        CLR     A  //A清零，准备装值DS18_READ1:        CLR     DS18DQ //拉低，产生下降沿        NOP     //延时2us，其实有没有都没有什么关系        NOP        SETB    DS18DQ //释放总线        MOV     R7,#07H  //等待15us        DJNZ    R7,$        MOV     C,DS18DQ  //获?数据        RRC     A        //将获得数据存到A中                           MOV     R7,#30 //延时60us        DJNZ    R7,$        SETB    DS18DQ   //拉高，准备下次产生下降沿        DJNZ    R6,DS18_READ1        POP     07H  //恢复Rn的        POP     06H        RETDISPLAY:        XCH  A,R1        MOV A,#0AH        MOV B,32H        MUL AB         ADD A,31H        MOV 33H,A        MOV TARGHT,33H        XCH  A,R1        RETWAVE:        CLR EA        LCALL  CONVERT_TEMPERATURE //调用转子程序        MOV    R5,#80LOOP1:    LCALL  DISPLAY //调用显示防止掉显，同时等待转换完成        DJNZ   R5,LOOP1        LCALL  GET_TEMPERATURE  //获?转换值        LCALL  CAL_TEMPERATURE //计算温度值        MOV SBUF,R1;发送温度到串口4800        JNB TI,$        CLR TI        CJNE COUNTER,#30H, ZGENGSHU        MOV COUNTER,#25H        CLR TF0        MOV TL0,#000H          MOV TH0,#0D9H        SETB EA        RETIFUSHU:        SETB P2.0        CLR TF0        MOV TL0,#000H          MOV TH0,#0D9H        SETB EA        RETIZGENGSHU:        INC COUNTER        MOV A,COUNTER        SUBB A,TARGHT        JB ACC.7, FUSHU        CLR P2.0          CLR TF0        MOV TL0,#000H          MOV TH0,#0D9H        SETB EA        RETI</code></pre><p><font color = blue size = 4>最后完成这次课设,模拟了大棚的调温系统,但是这只是简单的模拟,和真正的控温系统差的还是很远…..</font><br></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STC52 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于51单片机和DS1302的定时小风扇</title>
      <link href="2021/01/05/%E5%9F%BA%E4%BA%8E51%E5%8D%95%E7%89%87%E6%9C%BA%E5%92%8CDS1302%E7%9A%84%E5%AE%9A%E6%97%B6%E5%B0%8F%E9%A3%8E%E6%89%87/"/>
      <url>2021/01/05/%E5%9F%BA%E4%BA%8E51%E5%8D%95%E7%89%87%E6%9C%BA%E5%92%8CDS1302%E7%9A%84%E5%AE%9A%E6%97%B6%E5%B0%8F%E9%A3%8E%E6%89%87/</url>
      
        <content type="html"><![CDATA[<h5 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h5><p><font  size = 4>刚来西科大时还没有装空调，夏天晚上只能用风扇‘帮助’睡眠,但是风扇开一晚上又容易着凉,所以想着搞一个可以定时调速的小风扇</font><br></p><h5 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h5><p><font color = blue size = 4>使用DS1302进行时间记录,使用52单片机进行数据读取 <br> 设置4个按键分别控制风速的加减和定时时间的加减<br>利用7个led灯显示定时时间(每灯表示半小时)<br>利用PWM和LM298N模块进行风扇的调速</font><br></p><h5 id="DS1302芯片"><a href="#DS1302芯片" class="headerlink" title="DS1302芯片"></a>DS1302芯片<br></h5><p><font size = 4> DS1302 是 DALLAS 公司推出的涓流充电时钟芯片 内含有一个实时时钟和 31 字节静态 RAM 通过简单的串行接口与单片机进行通信 实时时钟电路提供秒 分 时 日 日期 月 年的信息 每月的天数和闰年的天数可自动调整 时钟操作可通过 AM/PM 指示决定采用 24 或 12 小时格式 DS1302 与单片机之间能简单地采用同步串行的方式进行通信 仅需用到三个口线 1 RES 复位 2 I/O 数据线 3 SCLK串行时钟 时钟/RAM 的读/写数据以一个字节或多达 31 个字节的字符组方式通信 DS1302 工作时功耗很低 保持数据和时钟信息时功率小于 1mW</font><br><br><img src="http://fp1.fghrsh.net/2021/01/05/1e22fd811a86f5f3fa0ddc98d02be557.png" alt="alt 文本"></p><h5 id="硬件搭建"><a href="#硬件搭建" class="headerlink" title="硬件搭建"></a>硬件搭建<br></h5><p><font color = blue size = 4>通过一下午的布线 焊接 最终硬件搭建效果如下 感觉还不错，准备直接挂在床头，用两节18650电池供电</font><br><br><img src="http://fp1.fghrsh.net/2021/01/05/cd5b5b8bd539429642c1e82bd390fac3.jpg" alt="alt 文本"></p><h5 id="软件搭建"><a href="#软件搭建" class="headerlink" title="软件搭建"></a>软件搭建<br></h5><p><font color = blue size = 4>年代久远代码找不到了……</font><br></p><h6 id="至此-终于拥有一个可以陪我度过夏天的定时调速的小风扇了"><a href="#至此-终于拥有一个可以陪我度过夏天的定时调速的小风扇了" class="headerlink" title="至此,终于拥有一个可以陪我度过夏天的定时调速的小风扇了"></a>至此,终于拥有一个可以陪我度过夏天的定时调速的小风扇了</h6>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STC52 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32小玩意</title>
      <link href="2021/01/05/%E5%9F%BA%E4%BA%8EESP32%E7%9A%84%E5%B0%8F%E7%8E%A9%E6%84%8F/"/>
      <url>2021/01/05/%E5%9F%BA%E4%BA%8EESP32%E7%9A%84%E5%B0%8F%E7%8E%A9%E6%84%8F/</url>
      
        <content type="html"><![CDATA[<h5 id="基于ESP32的单色OLED播放器"><a href="#基于ESP32的单色OLED播放器" class="headerlink" title="基于ESP32的单色OLED播放器"></a>基于ESP32的单色OLED播放器<br></h5><p><font color = blue size = 4>  使用opencv处理源视频(切片+转灰度图),最终按照oled的显存格式写入oled。由于ESP32自身内存小,故视频源文件应使用网络IO或SD卡IO进行传输</font><br><br><font color = red size = 4>  ESP端</font> <br><br><img src="http://fp1.fghrsh.net/2021/01/05/60df43d554651f94a2ba995b8b203294.png" alt="alt 文本" title="ESP端"><br><br><font color = red size = 4>  PC端</font> <br><br><img src="http://fp1.fghrsh.net/2021/01/05/6ae2a3a09019ae5efd3f315b914a8b1c.png" alt="alt 文本" title="PC端"><br></p><h5 id="基于ESP32的天气预报装置"><a href="#基于ESP32的天气预报装置" class="headerlink" title="基于ESP32的天气预报装置"></a>基于ESP32的天气预报装置<br></h5><p><font color = blue size = 4>  使用京东的天气API并使用ESP32访问该API，解析返回json文件得到天气数据,显示在TFT彩屏上</font>    <br><br><img src="http://fp1.fghrsh.net/2021/01/05/271fda81053f08c03bac155fb58a42b8.png" alt="alt 文本"></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ESP32的2.8寸彩屏驱动</title>
      <link href="2021/01/05/ESP32%E4%B8%8A%E7%9A%84ILI%E5%B1%8F%E5%B9%95%E9%A9%B1%E5%8A%A8/"/>
      <url>2021/01/05/ESP32%E4%B8%8A%E7%9A%84ILI%E5%B1%8F%E5%B9%95%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h5 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h5><p><font size = 4>  这快2.8寸TFT彩屏是从淘宝买的,分辨率320*240 驱动是ILI9341 接口是SPI,网上找到了32上跑的驱动代码,但是并没有找到ESP的驱动代码,准备自己写一个ESP32使用的ILI9341驱动和一些简单的画图接口</font></p><h5 id="屏幕初始化"><a href="#屏幕初始化" class="headerlink" title="屏幕初始化"></a>屏幕初始化</h5><p><font size = 4>  这个比较容易实现,现在已经有基于stm32的屏幕驱动,可以直接将C代码用python语法重写一遍即可</font><br><br>    #——————————–初始化即底层代码(部分)——————————————–#<br>    def <strong>init</strong>(self, spi, cs, dc, rst, w, h, r):<br>        self.spi = spi<br>        self.cs = cs<br>        self.dc = dc<br>        self.rst = rst<br>        self.init_width = w<br>        self.init_height = h<br>        self.width = w<br>        self.height = h<br>        self.rotation = r<br>        self.cs.init(self.cs.OUT, value=1)<br>        self.dc.init(self.dc.OUT, value=0)<br>        self.rst.init(self.rst.OUT, value=0)<br>        self.reset()<br>        self.init()<br>    ……………………………………….<br>    def reset(self):<br>        self.rst(0)<br>        time.sleep_ms(50)<br>        self.rst(1)<br>        time.sleep_ms(50)<br>    #写数据<br>    def data(self, data):<br>        self.dc(1)<br>        self.cs(0)<br>        self.spi.write(data)<br>        self.cs(1)<br>    #写命令<br>    def command(self, command):<br>        self.dc(0)<br>        self.cs(0)<br>        self.spi.write(bytearray([command]))<br>        self.cs(1)<br>    #写入块<br>    def writeblock(self, x0, y0, x1, y1):<br>        self.command(CASET)# 列地址设置<br>        self.data(struct.pack(“&gt;HH”, x0, x1))<br>        self.command(PASET)# 页地址设置<br>        self.data(struct.pack(“&gt;HH”, y0, y1))<br>        self.command(RAMWR)# 内存写入<br>    #读取块，返回<br>    def readblock(self, x0, y0, x1, y1):<br>        self.command(CASET)# 列地址设置<br>        self.data(struct.pack(“&gt;HH”, x0, x1))<br>        self.command(PASET)# 页地址设置<br>        self.data(struct.pack(“&gt;HH”, y0, y1))<br>        self.command(RAMRD)# 内存读出<br>        data = self.spi.read((x1 - x0 + 1) * (y1 - y0 + 1) * 3)<br>        return data<br>    #———————————————————————————————#</p><h5 id="添加基本绘图接口"><a href="#添加基本绘图接口" class="headerlink" title="添加基本绘图接口"></a>添加基本绘图接口</h5><p><font size = 4>  利用micro python固件提供的FrameBuffer类,重写该类方法，可以大大节省时间,在ESP内存中创建一个缓冲区，将要写入显存的数据先写入FrameBuffer,最终在show方法中将缓冲区数据通过SPI写入显存</font><br><font color = red size = 4> 注意!这块2.8寸屏的分辨率为320<em>240,而且数据格式为RGB565,即一个像素点需要16个bit,共需要320</em>240*16bit空间，对于ESP32肯定不能一次性写入显存(内存不足),应该多创建几次FrameBuffer分批写入比较合理</font></p><h6 id="1-画点"><a href="#1-画点" class="headerlink" title="1.画点"></a>1.画点</h6><pre><code>def pixel(self,x,y,c = 0xffff):    self.getbuffer(x,y,1,1)    self.fb.pixel(0,0,c)    </code></pre><h6 id="2-画线"><a href="#2-画线" class="headerlink" title="2.画线"></a>2.画线</h6><pre><code>def line(self,x1,y1,x2,y2,c = 0xffff):    w = x2-x1    h = y2-y1    self.getbuffer(x1,y1,w,h)    self.fb.line(0,0,w,h,c)    self.show()</code></pre><h6 id="3-画矩形"><a href="#3-画矩形" class="headerlink" title="3.画矩形"></a>3.画矩形</h6><pre><code>def rect(self,x,y,w,h,c = 0xffff):    self.getbuffer(x,y,w,h)    self.fb.rect(0,0,w,h,c)    self.show()</code></pre><h6 id="4-填充、擦除、斜线等绘图接口"><a href="#4-填充、擦除、斜线等绘图接口" class="headerlink" title="4.填充、擦除、斜线等绘图接口"></a>4.填充、擦除、斜线等绘图接口</h6><p><font size = 4> 详见<a href="https://github.com/lyzp">个人github</a></font></p><h5 id="添加高级绘图接口"><a href="#添加高级绘图接口" class="headerlink" title="添加高级绘图接口 "></a>添加高级绘图接口 <br></h5><h6 id="1-显示图片"><a href="#1-显示图片" class="headerlink" title="1.显示图片"></a>1.显示图片</h6><pre><code>#---------------------------------实现图片(数组)显示由SD卡或网络传输--------------------------------##x,y图片起始显示位置#pic_w,pic_h图片宽高#图片文件的路径def bitmap(self,x,y,pic_w,pic_h,file_name):    lines = 6    block = pic_w * lines * 2    nums = (pic_w * pic_h * 2) // block    with open(file_name,&#39;rb&#39;) as fio:      for v in range(nums):        self.getbuffer(x ,y+v*lines, pic_w ,lines)        self.buf = fio.read(block)        self.show()#实现网络传输图片def bitmap_net(self,sock):    lines = 6    x = int(sock.recv(10))    sock.send(b&#39;s&#39;)    y = int(sock.recv(10))    sock.send(b&#39;s&#39;)    pic_w = int(sock.recv(10))    sock.send(b&#39;s&#39;)    pic_h = int(sock.recv(10))    sock.send(b&#39;s&#39;)    block = pic_w * lines * 2    nums = (pic_w * pic_h * 2) // block    for v in range(nums):      self.getbuffer(x ,y+v*lines, pic_w ,lines)      self.buf = sock.recv(block)      self.show()      time.sleep_ms(100)#延时等待刷新#---------------------------------------------------------------------------------------------#</code></pre><h6 id="2-显示字符"><a href="#2-显示字符" class="headerlink" title="2.显示字符"></a>2.显示字符</h6><pre><code>#--------------------------------字符输入自动换行支持所有字符的输入--------------------------------#        #功能：传入黑白字库文件，支持自定义字体颜色，速度较慢def print(self,str,xstart,ystart,fg = 0xffff,bg = 0x0000,font_path=&quot;/sd/utf16.zk&quot;,size=16):    def hex2bin(g):#将传入的颜色转为字节串      s = hex(g).replace(&quot;0x&quot;,&quot;&quot;)      while len(s)&lt;4:s = &#39;0&#39; + s#补全为四位      return bytearray([int(s[0:2],16),int(s[2:4],16)])    _fg = hex2bin(fg)    #前景色    _bg = hex2bin(bg)    #背景色    pos_y = ystart    charbytes = int((size**2)/8)#一个字符的所占的字节数，是跳转字库指针的最小单位     n = -1#字符计数器，表示当前显示的字符    max = int(240/size)-1    with open(font_path,&#39;rb&#39;) as f:#打开字库      for c in str:#分割字符串为字符        n = n + 1        v = 0#写入buf的计数器，每显示一个字符清零        f.seek(ord(c)*charbytes)#跳转到字符c的位置        chr_num = f.read(charbytes)#读取字符c,返回此字符对应的点阵数据        pos_x = xstart + size * n #y的位置为起始值加上n个字符size        if pos_x &gt;= 240 - 1.1 * size:#如果当前超出行          pos_y = pos_y + size#y位置向下偏移一个size&lt;换行&gt;          pos_x = xstart          n = -1        self.getbuffer(pos_x,pos_y,size,size)#每次显示一个字符        for byte in chr_num:#分割一个字符点阵数据为字节，并将整个字符入self.buf等待显示          x = bin(byte).replace(&#39;0b&#39;,&#39;&#39;)          while len(x)&lt;8:#补全为8位            x = &#39;0&#39; + x          for r in x:#将黑白字符转为彩色字符放在self.buf中            if r == &#39;0&#39;:              self.buf[0+2*v:2+2*v] = _bg            else:              self.buf[0+2*v:2+2*v] = _fg            v = v + 1        self.show()#显示一个字符#功能：直接传入转化好的RGB565字库,不可改颜色，但速度更快    def printf(self,str,xstart,ystart,font_path=&quot;/sd/utf16.fzk&quot;,size=16):    charbytes = int((size**2)*2)#一个字符的所占的字节数，是跳转字库指针的最小单位     n = -1    pos_y = ystart    max = int(240/size)-1    with open(font_path,&#39;rb&#39;) as f:#打开字库      for c in str:#分割字符串为字符        n = n + 1        pos_x = xstart + size * n #y的位置为起始值加上n个字符size        if pos_x &gt;= 240 - 1.1 * size:#如果当前y位置超出屏幕          pos_y = pos_y + size#x位置向下偏移一个size&lt;换行&gt;          pos_x = xstart          n = -1        self.getbuffer(pos_x,pos_y,size,size)#每次显示一个字符        f.seek(ord(c)*charbytes)#跳转到字符c的位置        self.buf = f.read(charbytes)#读取字符c,返回此字符对应的点阵数据        self.show()#显示一个字符#---------------------------------------------------------------------------------------------#</code></pre><p><font color = bule size = 4> 字库文件通过取模软件生成,并将其格式处理为RGB65 存于内存卡中</font><br><font size = 4> 实现代码如下:</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">old = <span class="string">r&#x27;C:\Users\liu\Desktop\22.DZK&#x27;</span></span><br><span class="line">new = <span class="string">r&#x27;C:\Users\liu\Desktop\utf.zk&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(old,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(new,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            a = fd.read(<span class="number">32</span>)</span><br><span class="line">            <span class="keyword">for</span> w <span class="keyword">in</span> a:</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                x = <span class="built_in">bin</span>(w).replace(<span class="string">&#x27;0b&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">while</span> <span class="built_in">len</span>(x)&lt;<span class="number">8</span>:</span><br><span class="line">                    x = <span class="string">&#x27;0&#x27;</span> + x</span><br><span class="line">                <span class="keyword">for</span> r <span class="keyword">in</span> x:</span><br><span class="line">                    <span class="keyword">if</span> r == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                        f.write(<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        f.write(<span class="string">b&#x27;\xff\xff&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h5><p><img src="http://fp1.fghrsh.net/2021/01/05/86506395cd7b7506fd90782817c964cd.png" alt="alt 文本"></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建ESP开发板</title>
      <link href="2021/01/05/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAESP%E5%BC%80%E5%8F%91%E6%9D%BF/"/>
      <url>2021/01/05/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAESP%E5%BC%80%E5%8F%91%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h5 id="所需工具😎"><a href="#所需工具😎" class="headerlink" title="所需工具😎"></a>所需工具😎</h5><p><font size = 4>  电烙铁 手</font></p><h5 id="购买模块"><a href="#购买模块" class="headerlink" title="购买模块"></a>购买模块</h5><p><font size = 4>  洞洞板 ESP32最小系统板 0.96OLED 2.8寸TFT彩屏 排针排母若干 各类电源接口</font><br><img src="http://fp1.fghrsh.net/2021/01/05/4b1886b53da9a6828765d02253fdb094.md.png" alt="alt 文本"></p><h5 id="最终成果"><a href="#最终成果" class="headerlink" title="最终成果"></a>最终成果</h5><p><font size = 4>  洞洞板出来的板子效果不大好，但是可以正常使用</font><br><img src="http://fp1.fghrsh.net/2021/01/05/13a52db047b0058c023f5b6ceac16384.png" alt="alt 文本"></p><h5 id="安装开发软件"><a href="#安装开发软件" class="headerlink" title="安装开发软件"></a>安装开发软件</h5><p><font size = 4>  uPyCraft是一个micropython的代码编辑器，可以使用串口直接连接ESP32</font><br><img src="http://fp1.fghrsh.net/2021/01/05/453ba8508d1952baae1d76f8777631cb.jpg" alt="alt 文本"></p><h5 id="烧录ESP32固件"><a href="#烧录ESP32固件" class="headerlink" title="烧录ESP32固件"></a>烧录ESP32固件</h5><p><font size = 4>  由于准备使用micropython固件,所以第一步先去micropython官网下载esp32的固件包,之后在使用uPyCraft将固件烧录到ESP32内</font><br><img src="http://fp1.fghrsh.net/2021/01/05/73b8fab28b6935ed33bff39df55d10b3.png" alt="alt 文本"></p><h5 id="至此ESP32开发板已经初步完成"><a href="#至此ESP32开发板已经初步完成" class="headerlink" title="至此ESP32开发板已经初步完成"></a>至此ESP32开发板已经初步完成</h5><p><img src="http://fp1.fghrsh.net/2021/01/05/4f79123d4b77f258164a8b0fd8aa47d9.png" alt="alt 文本"></p><h5 id="下一步准备在写一个ESP32的ILI屏幕驱动-一会见ヾ-≧▽≦-o"><a href="#下一步准备在写一个ESP32的ILI屏幕驱动-一会见ヾ-≧▽≦-o" class="headerlink" title="下一步准备在写一个ESP32的ILI屏幕驱动,一会见ヾ(≧▽≦*)o"></a>下一步准备在写一个ESP32的ILI屏幕驱动,一会见ヾ(≧▽≦*)o</h5>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
  
</search>
