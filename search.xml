<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>进出门播报</title>
      <link href="2021/01/06/%E8%BF%9B%E5%87%BA%E9%97%A8%E6%92%AD%E6%8A%A5/"/>
      <url>2021/01/06/%E8%BF%9B%E5%87%BA%E9%97%A8%E6%92%AD%E6%8A%A5/</url>
      
        <content type="html"><![CDATA[<h5 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h5><p><font  color = blue size = 4>前几天出去看到外面店里有可以识别有人进出门的小玩意，想着自己回来实现一下<br></font><br><br><font  size = 4>没用单片机,本来打算采用两个红外循迹模块A和B,若是先触发A在触发B则发出一个电平信号1，判断为有人进门，播放进门欢迎词。若是先触发B在触发A则发出一个电平信号0，判断为有人出门，播放出门欢迎词。但是最因为宿舍的门上不好安装，最终只是实现了最简版，等有时间在把这个补全<br></font><br></p><h5 id="语音播报模块"><a href="#语音播报模块" class="headerlink" title="语音播报模块"></a>语音播报模块<br></h5><p><font  size = 4> 负责根据电平信号播放不同音乐。</font><br><br><img src="http://fp1.fghrsh.net/2021/01/07/41abaaa2bc3e4a33c36c841fe49325b6.png" alt="41abaaa2bc3e4a33c36c841fe49325b6.png"></p><h5 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果<br></h5><p><img src="http://fp1.fghrsh.net/2021/01/07/0540c6daff2a6857fc87da3d198da85d.jpg" alt="0540c6daff2a6857fc87da3d198da85d.jpg"><br></p><p><font  color = red size = 4>为了节省整个装置体积,使用的是手机上拆下的小扬声器</font><br></p>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语音模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019电赛-纸张计数装置设计</title>
      <link href="2021/01/06/2019%E7%94%B5%E8%B5%9B-%E7%BA%B8%E5%BC%A0%E8%AE%A1%E6%95%B0%E8%A3%85%E7%BD%AE%E8%AE%BE%E8%AE%A1/"/>
      <url>2021/01/06/2019%E7%94%B5%E8%B5%9B-%E7%BA%B8%E5%BC%A0%E8%AE%A1%E6%95%B0%E8%A3%85%E7%BD%AE%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h5 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因<br></h5><p><font color = blue size = 4>作为实验室的一员，每年的电赛是尽量要参加的，参加了19电赛,虽然最终成绩不理想但还是做个记录</font><br></p><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目<br></h5><p><img src="http://fp1.fghrsh.net/2021/01/06/06e3ea08ff339a7d2e442c199c1a4540.png" alt="06e3ea08ff339a7d2e442c199c1a4540.png"></p><h5 id="和实验室两位同学组队完成这次比赛-我负责硬件搭建和一些模块调试"><a href="#和实验室两位同学组队完成这次比赛-我负责硬件搭建和一些模块调试" class="headerlink" title="和实验室两位同学组队完成这次比赛,我负责硬件搭建和一些模块调试"></a>和实验室两位同学组队完成这次比赛,我负责硬件搭建和一些模块调试</h5><p><font color = blue size = 4>这是我们做的硬件，用亚克力切的，上部分可以拿起来，下部分固定负责放置A4纸，在两部分中央分别嵌入两块50*50的覆铜板,作为电容的两级,纸张数量的变化与电容变化存在一定关系，通过测量电容值就可以知道有几张纸。而电容的测量利用LC震荡电路来处理,只要将震荡频率传入单片机,单片机进行处理后就可以测得电容的变化量,进而推出纸张数目</font><br><br><img src="http://fp1.fghrsh.net/2021/01/06/93054dfa4b62fc4a329e4a8b0bda676a.jpg" alt="93054dfa4b62fc4a329e4a8b0bda676a.jpg"><br><br><font  color = blue size = 4>这是我做的附加模块，使用MY2490-16P语音模块,可以播报语音，将测量的纸张数目报出来,语音是使用科大讯飞API合成的</font><br><br><img src="http://fp1.fghrsh.net/2021/01/06/c3ab9531bddc817c1d6b1270b2c8dd47.jpg" alt="c3ab9531bddc817c1d6b1270b2c8dd47.jpg"></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><font  color = red size = 4>1.这次比赛我有点着急了，题目刚下来，没有过多思考硬件搭建方案就开始干了，导致我们硬件上和别人就拉开了一段差距，之后做事情一定要多想想在动手</font><br><br><font  color = red size = 4>2.关于电容的测量,一定一定要注意干扰的处理，该接地的地方必须得接地，该用屏蔽线的地方也必须使用屏蔽线,尽量减少寄生电容对测量的影响</font><br><br><font  color = red size = 4>3.还有,做这个比赛真的是太废人了，整个四天三夜估计也没睡10个小时,真的是要命,关键是自己在技术上还是差的太远，做了好多重复性工作，看实验室的其它大佬，人家早早就完成了，不像我们奋战到最后一秒，害🤣🤣🤣</font><br><br><font  color = red size = 4>4.最后,附上一张比赛时努力的同学们👍👍👍</font><br><br><img src="http://fp1.fghrsh.net/2021/01/06/f71d5f9d8828e2b3bf50455da871f832.jpg" alt="f71d5f9d8828e2b3bf50455da871f832.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科创实验室总结</title>
      <link href="2021/01/06/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%80%BB%E7%BB%93/"/>
      <url>2021/01/06/%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h5 id="说点废话"><a href="#说点废话" class="headerlink" title="说点废话"></a>说点废话</h5><p><font  size = 4>在实验室呆了几年了,还记得大一刚来实验室的第一个任务是做RS触发器学习C语言,还有用NE555设计方波发生器，当时连C语言编译环境都搭建半天，第一次焊接洞洞板也是很别扭，之后又接触到单片机，先学的51单片机，第一步是搭建最小系统板，随后在这个板子上完成实验室的每周任务，每个周六都要去考核，现在想起来还觉得挺有意思，不过U1S1当时去考核还是相当紧张的生怕自己被刷掉,不过还好到大一结束十几次任务每次都过了，终于成为一名科创班的正式成员了😁最后在大二又接触32单片机，打开了新世界的大门,32的运行速度更快，可以运行一些运算量大的程序，还接触到了树莓派，ESP32，msp430等等芯片。编程语言也从只会C进步到学习了python java ,python让我体会到了编程的快乐，它的语法简单库也很多,当时有个学长带我们搞计算机视觉，我当时选了一个手势识别的题目，为了完成这个题目，先后学了numpy矩阵运算库 opencv 视觉处理库还有Keras TS等智能算法库，照着别人的代码搭建了模型，为了加快训练速度还学了python的多进程、线程、协程等机制(虽然最后没用上🤦‍♂️)</font><br><br><font  color = red size = 4>最后还是要感谢实验室给我提供这么好的平台，总之在实验室学到了很多东西除了技术上的东西还有一些与人相处的道理,这几年在实验室经历还是很值得滴</font><br></p><h5 id="一-基于STM32的提醒喝水装置"><a href="#一-基于STM32的提醒喝水装置" class="headerlink" title="一.基于STM32的提醒喝水装置"></a>一.基于STM32的提醒喝水装置</h5><p><font  color = blue size = 4>大一参加TI杯的作品,设计并制作了一个智能提醒喝水装置。系统的主要功能模块包括：基于DS18B20的水温传感器模块、HX711测重模块、超声波模块HSCR04、OLED模块、MY2490-24SS语音模块、电源模块。利用蓝牙模块来设置预计喝水量，测重模块检测出每次喝水量，基于STM32F103RCT6单片机通过对预计喝水量和每次喝水量数据的处理。由OLED显示结果和语音模块来实现提醒喝水的作用。这个装置只是将各个模块调试好的组装品，程序也比较简单,就是水杯被拿起后的各种逻辑不好处理，只要判断清楚水杯拿起后是添水还是喝水还是水杯中已经无水问题就迎刃而解了<br></font><br><br><img src="http://fp1.fghrsh.net/2021/01/06/147068f545c7cda7e3c9c0f6282a79a6.jpg" alt="147068f545c7cda7e3c9c0f6282a79a6.jpg"><br><img src="http://fp1.fghrsh.net/2021/01/06/4cc4754173846eea81cd4fd81622feda.jpg" alt="4cc4754173846eea81cd4fd81622feda.jpg"><br></p><h5 id="二-基于STM32的平衡小车"><a href="#二-基于STM32的平衡小车" class="headerlink" title="二.基于STM32的平衡小车"></a>二.基于STM32的平衡小车</h5><p><font  color = blue size = 4>刚学习了pid算法,打算自己做辆平衡小车实践一下，电机(带编码器)和车架是在淘宝‘平衡小车之家’买的，陀螺仪用的MPU6050(关键便宜🤣)，硬件使用洞洞板焊接。代码部分参考‘平衡小车之家’提供源码，其中最难的还是pid参数调定，不得技巧前，我觉得这pid参数就和玄学一样🤦‍♂️，最后还是通过‘平衡小车之家’的小车PID参数调节技巧才最终调好🤣🤣🤣不容易不容易。。</font><br></p><p><img src="http://fp1.fghrsh.net/2021/01/08/02209303039d0ca27316bbd6011038a0.png" alt="02209303039d0ca27316bbd6011038a0.png"><br></p><p><font  color = red size = 4>最终效果放B站上了</font><br></p><iframe         width="400"     height="200"      src="/player.bilibili.com/player.html?aid=671019901&bvid=BV12a4y1n7ZQ&cid=279535514&page=1"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     allowfullscreen="true"> </iframe><h5 id="三-基于STM32和树莓派的板球控制系统"><a href="#三-基于STM32和树莓派的板球控制系统" class="headerlink" title="三.基于STM32和树莓派的板球控制系统"></a>三.基于STM32和树莓派的板球控制系统</h5><p><font  color = blue size = 4>和实验室同学一起搭建了一个板球系统，用两个舵机控制板的倾斜方向和程度, 用树莓派加摄像头读取小球位置，并通过串口传给单片机处理，使用PID算法控制小球位置</font><br><br><img src="http://fp1.fghrsh.net/2021/01/06/2ee3f03989c23ce0c8ad74bba6778013.jpg" alt="2ee3f03989c23ce0c8ad74bba6778013.jpg"><br></p><h5 id="四-基于STM32的自动泊车系统"><a href="#四-基于STM32的自动泊车系统" class="headerlink" title="四.基于STM32的自动泊车系统"></a>四.基于STM32的自动泊车系统</h5><p><font  color = blue size = 4>一个电赛练手题目，完成的还算比较好,就是小车底板上搭上超声波传感器和红外对管，最后加上MPU6050判断车体转角，在车道上加上红外漫反射开关即可完成自动泊车与按时计费</font><br><br><img src="http://fp1.fghrsh.net/2021/01/06/d86c9a369245c27a84a7ef40eef6d3d4.jpg" alt="d86c9a369245c27a84a7ef40eef6d3d4.jpg"><br></p><h5 id="五-基于STM32的智能物流机器人"><a href="#五-基于STM32的智能物流机器人" class="headerlink" title="五.基于STM32的智能物流机器人"></a>五.基于STM32的智能物流机器人</h5><p><font  color = blue size = 4>参加工程训练比赛的车,用的麦克纳姆轮可以在地图上进行平移，避免了转弯带来的误差，虽然最后只是拿到了省三，但还是学到了不少东西再次记录一下。</font><br></p><p><img src="http://fp1.fghrsh.net/2021/01/06/407e6ea9c530ce3a9af1606ded2cb902.jpg" alt="407e6ea9c530ce3a9af1606ded2cb902.jpg"></p><p><img src="http://fp1.fghrsh.net/2021/01/06/431e70a2264a9ac4ccf1ebad14be4060.jpg" alt="431e70a2264a9ac4ccf1ebad14be4060.jpg"><br></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于51单片机和DS18B20的自动控温小风扇</title>
      <link href="2021/01/05/%E5%9F%BA%E4%BA%8E51%E5%8D%95%E7%89%87%E6%9C%BA%E5%92%8CDS18B20%E7%9A%84%E8%87%AA%E5%8A%A8%E6%8E%A7%E6%B8%A9%E5%B0%8F%E9%A3%8E%E6%89%87/"/>
      <url>2021/01/05/%E5%9F%BA%E4%BA%8E51%E5%8D%95%E7%89%87%E6%9C%BA%E5%92%8CDS18B20%E7%9A%84%E8%87%AA%E5%8A%A8%E6%8E%A7%E6%B8%A9%E5%B0%8F%E9%A3%8E%E6%89%87/</url>
      
        <content type="html"><![CDATA[<h5 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h5><p><font  size = 4>学完单片机课程后的一次课程设计，也算是对自己学习的知识的一个应用,以前都是用C写的代码这次尝试使用汇编语言实现</font><br></p><h5 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h5><p><font color = blue size = 4>使用DS18B20进行环境温度测量,使用52单片机进行数据读取 <br> 利用PWM和LM298N模块进行风扇的调速(通过温度的变化来调整风速)<br>使用蓝牙通信,通过上位机设定所需维持温度</font><br></p><h5 id="DS18B20模块"><a href="#DS18B20模块" class="headerlink" title="DS18B20模块"></a>DS18B20模块<br></h5><p><font size = 4> DS18B20是常用的数字温度传感器，其输出的是数字信号，具有体积小，硬件开销低，抗干扰能力强，精度高的特点。其只需三条线即可工作</font><br><br><img src="http://fp1.fghrsh.net/2021/01/05/c8f479fce9b3182029fc2b8eb3ef98d1.png" alt="alt 文本"></p><h5 id="硬件搭建"><a href="#硬件搭建" class="headerlink" title="硬件搭建"></a>硬件搭建<br></h5><p><font color = blue size = 4>将各个模块焊接于洞洞板上 最终效果如下</font><br><br><img src="http://fp1.fghrsh.net/2021/01/05/90d77cb661f80ee3fbf00c93b44dbd2f.jpg" alt="alt 文本"></p><h5 id="软件搭建"><a href="#软件搭建" class="headerlink" title="软件搭建"></a>软件搭建<br></h5><p><font color = blue size = 4>第一次使用汇编写52的代码,非常不习惯啊</font><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line">T2CON EQU 0C8H</span><br><span class="line">T2MOD EQU 0C9H</span><br><span class="line">TR2 EQU T2CON.2</span><br><span class="line">TF2 EQU T2CON.7</span><br><span class="line">TL2 EQU 0CCH</span><br><span class="line">TH2 EQU 0CDH</span><br><span class="line">RCAP2L EQU 0CAH</span><br><span class="line">RCAP2H EQU 0CBH</span><br><span class="line">T2MODE EQU 0C9H</span><br><span class="line">TARGHT EQU 41H</span><br><span class="line">COUNTER EQU R3</span><br><span class="line">DS18DQ EQU P1.3   &#x2F;&#x2F;P1.3与DS18DQ等同，便于理解</span><br><span class="line">TEMPH EQU 29H       &#x2F;&#x2F;保存读出温度的低8位 </span><br><span class="line">TEMPL EQU 28H       &#x2F;&#x2F;保存读出温度的高8位 </span><br><span class="line">DS18FLAG EQU 40H  &#x2F;&#x2F;设置标志</span><br><span class="line">ORG 0000H</span><br><span class="line">;定时器0中断产生方波用</span><br><span class="line">LJMP START</span><br><span class="line">ORG 000BH</span><br><span class="line">LJMP WAVE</span><br><span class="line">START:MOV  30H,#00  &#x2F;&#x2F;设置初始值</span><br><span class="line">        MOV  31H,#00</span><br><span class="line">        MOV  32H,#00 </span><br><span class="line">START1:        </span><br><span class="line">        MOV TMOD,#21H</span><br><span class="line">        MOV TL1,#0F3H</span><br><span class="line">        MOV TH1,#0F3H</span><br><span class="line">        MOV PCON,#80H</span><br><span class="line">        CLR TI</span><br><span class="line">        MOV SCON,#50H  </span><br><span class="line">        </span><br><span class="line">START2:</span><br><span class="line">        MOV TL0,#000H  </span><br><span class="line">        MOV TH0,#0F9H</span><br><span class="line">        SETB TR0</span><br><span class="line">        SETB ET0</span><br><span class="line">        SETB EA;</span><br><span class="line">        LCALL  DS18_GF  &#x2F;&#x2F;设置DS18B20的工作方式</span><br><span class="line">START3: </span><br><span class="line">    LJMP  START3</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;初始化子程序</span><br><span class="line">DS18_START:  </span><br><span class="line">        PUSH   07H &#x2F;&#x2F;保存R7的值，防止改变R7的数值</span><br><span class="line">        SETB   DS18DQ  &#x2F;&#x2F;将数据线拉高</span><br><span class="line">        NOP    &#x2F;&#x2F;延时1us</span><br><span class="line">        CLR    DS18DQ  &#x2F;&#x2F;将数据线拉低</span><br><span class="line">        MOV    R7,#0   &#x2F;&#x2F;延时大约512us </span><br><span class="line">        DJNZ   R7,$</span><br><span class="line">        SETB   DS18DQ  &#x2F;&#x2F;将数据线拉高</span><br><span class="line">        MOV    R7,#40</span><br><span class="line">DS18_START1:        &#x2F;&#x2F;延时大约160us</span><br><span class="line">        JNB    DS18DQ,DS18_START2  &#x2F;&#x2F;检查DS18B20是否工作正常</span><br><span class="line">        DJNZ   R7,DS18_START1</span><br><span class="line">        SETB   DS18FLAG   &#x2F;&#x2F;工作不正常</span><br><span class="line">DS18_START2: </span><br><span class="line">        CLR   DS18FLAG</span><br><span class="line">        MOV    R7,#100 &#x2F;&#x2F;延时月200us</span><br><span class="line">        DJNZ   R7,$</span><br><span class="line">        POP    07H  &#x2F;&#x2F;恢复R7的值</span><br><span class="line">        RET</span><br><span class="line">&#x2F;&#x2F;设置DS18B20工作方式</span><br><span class="line">DS18_GF:</span><br><span class="line">        CLR  DS18FLAG &#x2F;&#x2F;清除标志</span><br><span class="line">        LCALL  DS18_START  &#x2F;&#x2F;调用初始化子程序</span><br><span class="line">        MOV  A,#0CCH  &#x2F;&#x2F;跳跃ROM指令</span><br><span class="line">        LCALL  DS18_SEND   &#x2F;&#x2F;</span><br><span class="line">        MOV    A,#4EH     &#x2F;&#x2F;向RAM写数据              </span><br><span class="line">        LCALL  DS18_SEND</span><br><span class="line">        MOV    A,#75  </span><br><span class="line">        LCALL  DS18_SEND</span><br><span class="line">        MOV  A,#0</span><br><span class="line">        LCALL  DS18_SEND</span><br><span class="line">        MOV  A,#7FH  &#x2F;&#x2F;设置工作方式</span><br><span class="line">        LCALL  DS18_SEND</span><br><span class="line">        CLR    DS18DQ  &#x2F;&#x2F;释放总线</span><br><span class="line">        LCALL  DELAY500US   &#x2F;&#x2F;延时500us </span><br><span class="line">        RET</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出转换温度命令</span><br><span class="line">CONVERT_TEMPERATURE:</span><br><span class="line">        LCALL  DS18_START &#x2F;&#x2F;调用初始化子程序</span><br><span class="line">        MOV    A,#0CCH    &#x2F;&#x2F;跳跃ROM指令          </span><br><span class="line">        LCALL DS18_SEND</span><br><span class="line">        MOV    A,#44H    &#x2F;&#x2F;温度转换         </span><br><span class="line">        LCALL  DS18_SEND</span><br><span class="line">        RET</span><br><span class="line">&#x2F;&#x2F;读温度数据</span><br><span class="line">GET_TEMPERATURE:</span><br><span class="line">        LCALL  DS18_START &#x2F;&#x2F;调用初始化子程序</span><br><span class="line">        MOV    A,#0CCH  &#x2F;&#x2F;跳跃ROM指令                 </span><br><span class="line">        LCALL  DS18_SEND</span><br><span class="line">        MOV    A,#0BEH   &#x2F;&#x2F;从RAM中的数据           </span><br><span class="line">        LCALL  DS18_SEND</span><br><span class="line">        LCALL  DELAY60US</span><br><span class="line">        LCALL  DS18_READ</span><br><span class="line">        MOV    TEMPL,A   &#x2F;&#x2F;将获得数据的低八位存到TEMPL</span><br><span class="line">        LCALL  DS18_READ</span><br><span class="line">        MOV    TEMPH,A  &#x2F;&#x2F;将获得数据的高八位存到TEMPH</span><br><span class="line">        CLR    DS18DQ   &#x2F;&#x2F;即复位。否则会一直读到</span><br><span class="line">        LCALL DELAY501US &#x2F;&#x2F;暂存第九字节              </span><br><span class="line">        RET</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;计算获得温度值，便于现实</span><br><span class="line">CAL_TEMPERATURE:</span><br><span class="line">        PUSH   07H    &#x2F;&#x2F;暂存，防止改变R7的数据</span><br><span class="line">        CLR    C    &#x2F;&#x2F;进位标志清零</span><br><span class="line">        MOV    R7,#04H  &#x2F;&#x2F;循环次数</span><br><span class="line"></span><br><span class="line">EX2:MOV    A,TEMPH &#x2F;&#x2F; 这些语句的作用是：</span><br><span class="line">        RRC    A  &#x2F;&#x2F; 整数位在：TEMPL中</span><br><span class="line">        MOV    TEMPH,A &#x2F;&#x2F;?数位在：TEMPH中的高半</span><br><span class="line">        MOV    A,TEMPL</span><br><span class="line">        RRC    A</span><br><span class="line">        MOV    TEMPL,A</span><br><span class="line">        DJNZ   R7,EX2 &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">        MOV    A,TEMPH  &#x2F;&#x2F;</span><br><span class="line">        RLC    A   &#x2F;&#x2F;这些语句的作用是：</span><br><span class="line">        RLC    A   &#x2F;&#x2F;把TEMPH得高半移到低四位中</span><br><span class="line">        RLC    A</span><br><span class="line">        RLC    A  &#x2F;&#x2F;</span><br><span class="line">        ANL    A,#0FH &#x2F;&#x2F;屏蔽高四位，保留低四位</span><br><span class="line">        MOV    DPTR,#TAB_TEMP &#x2F;&#x2F;赋带?数点的数值表的表首地址</span><br><span class="line">        MOVC   A,@A+DPTR</span><br><span class="line">        MOV    30H,A  &#x2F;&#x2F;暂存该值，用于显示</span><br><span class="line">        MOV    A,TEMPL</span><br><span class="line">        CLR    C</span><br><span class="line">        MOV    B,#0AH</span><br><span class="line">        DIV    AB  &#x2F;&#x2F;分离整数位的高低四位</span><br><span class="line">        MOV    32H,A  &#x2F;&#x2F;暂存十位</span><br><span class="line">        MOV    A,B</span><br><span class="line">        ADD    A,#10H</span><br><span class="line">        MOV    31H,A  &#x2F;&#x2F;暂存个位</span><br><span class="line">        POP    07H    &#x2F;&#x2F;恢复R7的值</span><br><span class="line">        RET</span><br><span class="line">&#x2F;&#x2F;写数据子程序</span><br><span class="line">DS18_SEND:   </span><br><span class="line">        PUSH   06H  &#x2F;&#x2F;保护Rn的值</span><br><span class="line">        PUSH   07H</span><br><span class="line">        &#x2F;&#x2F;以下语句是&quot;写 笔毙虻脑?</span><br><span class="line">        SETB   DS18DQ  &#x2F;&#x2F;写时序是有DS18DQ的下降沿决定</span><br><span class="line">        NOP     &#x2F;&#x2F;延时1us</span><br><span class="line">        MOV    R6,#08H  &#x2F;&#x2F;循环次数，一个字节</span><br><span class="line">DS18_SEND1:</span><br><span class="line">        CLR     DS18DQ  &#x2F;&#x2F;拉低，产生下降沿</span><br><span class="line">        MOV     R7,#07  &#x2F;&#x2F;延时大约15us</span><br><span class="line">        DJNZ    R7,$</span><br><span class="line">        RRC     A  &#x2F;&#x2F;把要写入得数据的高位移到C中</span><br><span class="line">        MOV     DS18DQ,C   &#x2F;&#x2F;再把C的值赋给DS18DQ</span><br><span class="line">        MOV     R7,#30    &#x2F;&#x2F;延时时间约为60us，只要大约45us即可</span><br><span class="line">        DJNZ    R7,$</span><br><span class="line">        SETB    DS18DQ   &#x2F;&#x2F;拉高准备，下次产生下降沿</span><br><span class="line">        DJNZ    R6,DS18_SEND1 &#x2F;&#x2F;判断循环次数够了没</span><br><span class="line">        POP     07H   &#x2F;&#x2F;恢复Rn的数据</span><br><span class="line">        POP     06H</span><br><span class="line">        RET</span><br><span class="line">&#x2F;&#x2F;读数据子程序</span><br><span class="line">DS18_READ:   </span><br><span class="line">        PUSH    06H   &#x2F;&#x2F; 保护Rn的值</span><br><span class="line">        PUSH    07H</span><br><span class="line">        &#x2F;&#x2F;以下为 岸?钡氖毙?</span><br><span class="line">        SETB    DS18DQ &#x2F;&#x2F;拉高，准备产生下降沿</span><br><span class="line">        MOV     R6,#08H  &#x2F;&#x2F;循环次数</span><br><span class="line">        CLR     A  &#x2F;&#x2F;A清零，准备装值</span><br><span class="line">DS18_READ1:</span><br><span class="line">        CLR     DS18DQ &#x2F;&#x2F;拉低，产生下降沿</span><br><span class="line">        NOP     &#x2F;&#x2F;延时2us，其实有没有都没有什么关系</span><br><span class="line">        NOP</span><br><span class="line">        SETB    DS18DQ &#x2F;&#x2F;释放总线</span><br><span class="line">        MOV     R7,#07H  &#x2F;&#x2F;等待15us</span><br><span class="line">        DJNZ    R7,$</span><br><span class="line">        MOV     C,DS18DQ  &#x2F;&#x2F;获?数据</span><br><span class="line">        RRC     A        &#x2F;&#x2F;将获得数据存到A中                   </span><br><span class="line">        MOV     R7,#30 &#x2F;&#x2F;延时60us</span><br><span class="line">        DJNZ    R7,$</span><br><span class="line">        SETB    DS18DQ   &#x2F;&#x2F;拉高，准备下次产生下降沿</span><br><span class="line">        DJNZ    R6,DS18_READ1</span><br><span class="line">        POP     07H  &#x2F;&#x2F;恢复Rn的</span><br><span class="line">        POP     06H</span><br><span class="line">        RET</span><br><span class="line"></span><br><span class="line">DISPLAY:</span><br><span class="line">        XCH  A,R1</span><br><span class="line">        MOV A,#0AH</span><br><span class="line">        MOV B,32H</span><br><span class="line">        MUL AB </span><br><span class="line">        ADD A,31H</span><br><span class="line">        MOV 33H,A</span><br><span class="line">        MOV TARGHT,33H</span><br><span class="line">        XCH  A,R1</span><br><span class="line">        RET</span><br><span class="line">WAVE:</span><br><span class="line">        CLR EA</span><br><span class="line">        LCALL  CONVERT_TEMPERATURE &#x2F;&#x2F;调用转子程序</span><br><span class="line">        MOV    R5,#80</span><br><span class="line">LOOP1:LCALL  DISPLAY &#x2F;&#x2F;调用显示防止掉显，同时等待转换完成</span><br><span class="line">        DJNZ   R5,LOOP1</span><br><span class="line">        LCALL  GET_TEMPERATURE  &#x2F;&#x2F;获?转换值</span><br><span class="line">        LCALL  CAL_TEMPERATURE &#x2F;&#x2F;计算温度值</span><br><span class="line"></span><br><span class="line">        MOV SBUF,R1;发送温度到串口4800</span><br><span class="line">        JNB TI,$</span><br><span class="line">        CLR TI</span><br><span class="line">        CJNE COUNTER,#30H, ZGENGSHU</span><br><span class="line">        MOV COUNTER,#25H</span><br><span class="line">        CLR TF0</span><br><span class="line">        MOV TL0,#000H  </span><br><span class="line">        MOV TH0,#0D9H</span><br><span class="line">        SETB EA</span><br><span class="line">        RETI</span><br><span class="line">FUSHU:</span><br><span class="line">        SETB P2.0</span><br><span class="line">        CLR TF0</span><br><span class="line">        MOV TL0,#000H  </span><br><span class="line">        MOV TH0,#0D9H</span><br><span class="line">        SETB EA</span><br><span class="line">        RETI</span><br><span class="line">ZGENGSHU:</span><br><span class="line">        INC COUNTER</span><br><span class="line">        MOV A,COUNTER</span><br><span class="line">        SUBB A,TARGHT</span><br><span class="line">        JB ACC.7, FUSHU</span><br><span class="line">        CLR P2.0  </span><br><span class="line">        CLR TF0</span><br><span class="line">        MOV TL0,#000H  </span><br><span class="line">        MOV TH0,#0D9H</span><br><span class="line">        SETB EA</span><br><span class="line">        RETI</span><br></pre></td></tr></table></figure><p><font color = blue size = 4>最后完成这次课设,模拟了大棚的调温系统,但是这只是简单的模拟,和真正的控温系统差的还是很远…..</font><br></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STC52 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于51单片机和DS1302的定时小风扇</title>
      <link href="2021/01/05/%E5%9F%BA%E4%BA%8E51%E5%8D%95%E7%89%87%E6%9C%BA%E5%92%8CDS1302%E7%9A%84%E5%AE%9A%E6%97%B6%E5%B0%8F%E9%A3%8E%E6%89%87/"/>
      <url>2021/01/05/%E5%9F%BA%E4%BA%8E51%E5%8D%95%E7%89%87%E6%9C%BA%E5%92%8CDS1302%E7%9A%84%E5%AE%9A%E6%97%B6%E5%B0%8F%E9%A3%8E%E6%89%87/</url>
      
        <content type="html"><![CDATA[<h5 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h5><p><font  size = 4>刚来西科大时还没有装空调，夏天晚上只能用风扇‘帮助’睡眠,但是风扇开一晚上又容易着凉,所以想着搞一个可以定时调速的小风扇</font><br></p><h5 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h5><p><font color = blue size = 4>使用DS1302进行时间记录,使用52单片机进行数据读取 <br> 设置4个按键分别控制风速的加减和定时时间的加减<br>利用7个led灯显示定时时间(每灯表示半小时)<br>利用PWM和LM298N模块进行风扇的调速</font><br></p><h5 id="DS1302芯片"><a href="#DS1302芯片" class="headerlink" title="DS1302芯片"></a>DS1302芯片<br></h5><p><font size = 4> DS1302 是 DALLAS 公司推出的涓流充电时钟芯片 内含有一个实时时钟和 31 字节静态 RAM 通过简单的串行接口与单片机进行通信 实时时钟电路提供秒 分 时 日 日期 月 年的信息 每月的天数和闰年的天数可自动调整 时钟操作可通过 AM/PM 指示决定采用 24 或 12 小时格式 DS1302 与单片机之间能简单地采用同步串行的方式进行通信 仅需用到三个口线 1 RES 复位 2 I/O 数据线 3 SCLK串行时钟 时钟/RAM 的读/写数据以一个字节或多达 31 个字节的字符组方式通信 DS1302 工作时功耗很低 保持数据和时钟信息时功率小于 1mW</font><br><br><img src="http://fp1.fghrsh.net/2021/01/05/1e22fd811a86f5f3fa0ddc98d02be557.png" alt="alt 文本"></p><h5 id="硬件搭建"><a href="#硬件搭建" class="headerlink" title="硬件搭建"></a>硬件搭建<br></h5><p><font color = blue size = 4>通过一下午的布线 焊接 最终硬件搭建效果如下 感觉还不错，准备直接挂在床头，用两节18650电池供电</font><br><br><img src="http://fp1.fghrsh.net/2021/01/05/cd5b5b8bd539429642c1e82bd390fac3.jpg" alt="alt 文本"></p><h5 id="软件搭建"><a href="#软件搭建" class="headerlink" title="软件搭建"></a>软件搭建<br></h5><p><font color = blue size = 4>年代久远代码找不到了……</font><br></p><h6 id="至此-终于拥有一个可以陪我度过夏天的定时调速的小风扇了"><a href="#至此-终于拥有一个可以陪我度过夏天的定时调速的小风扇了" class="headerlink" title="至此,终于拥有一个可以陪我度过夏天的定时调速的小风扇了"></a>至此,终于拥有一个可以陪我度过夏天的定时调速的小风扇了</h6>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STC52 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESP32小玩意</title>
      <link href="2021/01/05/%E5%9F%BA%E4%BA%8EESP32%E7%9A%84%E5%B0%8F%E7%8E%A9%E6%84%8F/"/>
      <url>2021/01/05/%E5%9F%BA%E4%BA%8EESP32%E7%9A%84%E5%B0%8F%E7%8E%A9%E6%84%8F/</url>
      
        <content type="html"><![CDATA[<h5 id="基于ESP32的单色OLED播放器"><a href="#基于ESP32的单色OLED播放器" class="headerlink" title="基于ESP32的单色OLED播放器"></a>基于ESP32的单色OLED播放器<br></h5><p><font color = blue size = 4>  使用opencv处理源视频(切片+转灰度图),最终按照oled的显存格式写入oled。由于ESP32自身内存小,故视频源文件应使用网络IO或SD卡IO进行传输</font><br><br><font color = red size = 4>  ESP端</font> <br><br><img src="http://fp1.fghrsh.net/2021/01/05/60df43d554651f94a2ba995b8b203294.png" alt="alt 文本" title="ESP端"><br><br><font color = red size = 4>  PC端</font> <br><br><img src="http://fp1.fghrsh.net/2021/01/05/6ae2a3a09019ae5efd3f315b914a8b1c.png" alt="alt 文本" title="PC端"><br></p><p><font  color = red size = 4>最终效果放B站上了</font><br></p><iframe         width="400"     height="200"      src="//player.bilibili.com/player.html?aid=671111264&bvid=BV1zU4y1x71X&cid=277597252&page=1"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     allowfullscreen="true"> </iframe><h5 id="基于ESP32的天气预报装置"><a href="#基于ESP32的天气预报装置" class="headerlink" title="基于ESP32的天气预报装置"></a>基于ESP32的天气预报装置<br></h5><p><font color = blue size = 4>  使用京东的天气API并使用ESP32访问该API，解析返回json文件得到天气数据,显示在TFT彩屏上</font>    <br><br><img src="http://fp1.fghrsh.net/2021/01/05/271fda81053f08c03bac155fb58a42b8.png" alt="alt 文本"></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ESP32的2.8寸彩屏驱动</title>
      <link href="2021/01/05/ESP32%E4%B8%8A%E7%9A%84ILI%E5%B1%8F%E5%B9%95%E9%A9%B1%E5%8A%A8/"/>
      <url>2021/01/05/ESP32%E4%B8%8A%E7%9A%84ILI%E5%B1%8F%E5%B9%95%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h5 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h5><p><font size = 4>  这快2.8寸TFT彩屏是从淘宝买的,分辨率320*240 驱动是ILI9341 接口是SPI,网上找到了32上跑的驱动代码,但是并没有找到ESP的驱动代码,准备自己写一个ESP32使用的ILI9341驱动和一些简单的画图接口</font></p><h5 id="屏幕初始化"><a href="#屏幕初始化" class="headerlink" title="屏幕初始化"></a>屏幕初始化</h5><p><font size = 4>  这个比较容易实现,现在已经有基于stm32的屏幕驱动,可以直接将C代码用python语法重写一遍即可</font><br><br>    #——————————–初始化即底层代码(部分)——————————————–#<br>    def <strong>init</strong>(self, spi, cs, dc, rst, w, h, r):<br>        self.spi = spi<br>        self.cs = cs<br>        self.dc = dc<br>        self.rst = rst<br>        self.init_width = w<br>        self.init_height = h<br>        self.width = w<br>        self.height = h<br>        self.rotation = r<br>        self.cs.init(self.cs.OUT, value=1)<br>        self.dc.init(self.dc.OUT, value=0)<br>        self.rst.init(self.rst.OUT, value=0)<br>        self.reset()<br>        self.init()<br>    ……………………………………….<br>    def reset(self):<br>        self.rst(0)<br>        time.sleep_ms(50)<br>        self.rst(1)<br>        time.sleep_ms(50)<br>    #写数据<br>    def data(self, data):<br>        self.dc(1)<br>        self.cs(0)<br>        self.spi.write(data)<br>        self.cs(1)<br>    #写命令<br>    def command(self, command):<br>        self.dc(0)<br>        self.cs(0)<br>        self.spi.write(bytearray([command]))<br>        self.cs(1)<br>    #写入块<br>    def writeblock(self, x0, y0, x1, y1):<br>        self.command(CASET)# 列地址设置<br>        self.data(struct.pack(“&gt;HH”, x0, x1))<br>        self.command(PASET)# 页地址设置<br>        self.data(struct.pack(“&gt;HH”, y0, y1))<br>        self.command(RAMWR)# 内存写入<br>    #读取块，返回<br>    def readblock(self, x0, y0, x1, y1):<br>        self.command(CASET)# 列地址设置<br>        self.data(struct.pack(“&gt;HH”, x0, x1))<br>        self.command(PASET)# 页地址设置<br>        self.data(struct.pack(“&gt;HH”, y0, y1))<br>        self.command(RAMRD)# 内存读出<br>        data = self.spi.read((x1 - x0 + 1) * (y1 - y0 + 1) * 3)<br>        return data<br>    #———————————————————————————————#</p><h5 id="添加基本绘图接口"><a href="#添加基本绘图接口" class="headerlink" title="添加基本绘图接口"></a>添加基本绘图接口</h5><p><font size = 4>  利用micro python固件提供的FrameBuffer类,重写该类方法，可以大大节省时间,在ESP内存中创建一个缓冲区，将要写入显存的数据先写入FrameBuffer,最终在show方法中将缓冲区数据通过SPI写入显存</font><br><font color = red size = 4> 注意!这块2.8寸屏的分辨率为320<em>240,而且数据格式为RGB565,即一个像素点需要16个bit,共需要320</em>240*16bit空间，对于ESP32肯定不能一次性写入显存(内存不足),应该多创建几次FrameBuffer分批写入比较合理</font></p><h6 id="1-画点"><a href="#1-画点" class="headerlink" title="1.画点"></a>1.画点</h6><pre><code>def pixel(self,x,y,c = 0xffff):    self.getbuffer(x,y,1,1)    self.fb.pixel(0,0,c)    </code></pre><h6 id="2-画线"><a href="#2-画线" class="headerlink" title="2.画线"></a>2.画线</h6><pre><code>def line(self,x1,y1,x2,y2,c = 0xffff):    w = x2-x1    h = y2-y1    self.getbuffer(x1,y1,w,h)    self.fb.line(0,0,w,h,c)    self.show()</code></pre><h6 id="3-画矩形"><a href="#3-画矩形" class="headerlink" title="3.画矩形"></a>3.画矩形</h6><pre><code>def rect(self,x,y,w,h,c = 0xffff):    self.getbuffer(x,y,w,h)    self.fb.rect(0,0,w,h,c)    self.show()</code></pre><h6 id="4-填充、擦除、斜线等绘图接口"><a href="#4-填充、擦除、斜线等绘图接口" class="headerlink" title="4.填充、擦除、斜线等绘图接口"></a>4.填充、擦除、斜线等绘图接口</h6><p><font size = 4> 详见<a href="https://github.com/lyzp">个人github</a></font></p><h5 id="添加高级绘图接口"><a href="#添加高级绘图接口" class="headerlink" title="添加高级绘图接口 "></a>添加高级绘图接口 <br></h5><h6 id="1-显示图片"><a href="#1-显示图片" class="headerlink" title="1.显示图片"></a>1.显示图片</h6><pre><code>#---------------------------------实现图片(数组)显示由SD卡或网络传输--------------------------------##x,y图片起始显示位置#pic_w,pic_h图片宽高#图片文件的路径def bitmap(self,x,y,pic_w,pic_h,file_name):    lines = 6    block = pic_w * lines * 2    nums = (pic_w * pic_h * 2) // block    with open(file_name,&#39;rb&#39;) as fio:      for v in range(nums):        self.getbuffer(x ,y+v*lines, pic_w ,lines)        self.buf = fio.read(block)        self.show()#实现网络传输图片def bitmap_net(self,sock):    lines = 6    x = int(sock.recv(10))    sock.send(b&#39;s&#39;)    y = int(sock.recv(10))    sock.send(b&#39;s&#39;)    pic_w = int(sock.recv(10))    sock.send(b&#39;s&#39;)    pic_h = int(sock.recv(10))    sock.send(b&#39;s&#39;)    block = pic_w * lines * 2    nums = (pic_w * pic_h * 2) // block    for v in range(nums):      self.getbuffer(x ,y+v*lines, pic_w ,lines)      self.buf = sock.recv(block)      self.show()      time.sleep_ms(100)#延时等待刷新#---------------------------------------------------------------------------------------------#</code></pre><h6 id="2-显示字符"><a href="#2-显示字符" class="headerlink" title="2.显示字符"></a>2.显示字符</h6><pre><code>#--------------------------------字符输入自动换行支持所有字符的输入--------------------------------#        #功能：传入黑白字库文件，支持自定义字体颜色，速度较慢def print(self,str,xstart,ystart,fg = 0xffff,bg = 0x0000,font_path=&quot;/sd/utf16.zk&quot;,size=16):    def hex2bin(g):#将传入的颜色转为字节串      s = hex(g).replace(&quot;0x&quot;,&quot;&quot;)      while len(s)&lt;4:s = &#39;0&#39; + s#补全为四位      return bytearray([int(s[0:2],16),int(s[2:4],16)])    _fg = hex2bin(fg)    #前景色    _bg = hex2bin(bg)    #背景色    pos_y = ystart    charbytes = int((size**2)/8)#一个字符的所占的字节数，是跳转字库指针的最小单位     n = -1#字符计数器，表示当前显示的字符    max = int(240/size)-1    with open(font_path,&#39;rb&#39;) as f:#打开字库      for c in str:#分割字符串为字符        n = n + 1        v = 0#写入buf的计数器，每显示一个字符清零        f.seek(ord(c)*charbytes)#跳转到字符c的位置        chr_num = f.read(charbytes)#读取字符c,返回此字符对应的点阵数据        pos_x = xstart + size * n #y的位置为起始值加上n个字符size        if pos_x &gt;= 240 - 1.1 * size:#如果当前超出行          pos_y = pos_y + size#y位置向下偏移一个size&lt;换行&gt;          pos_x = xstart          n = -1        self.getbuffer(pos_x,pos_y,size,size)#每次显示一个字符        for byte in chr_num:#分割一个字符点阵数据为字节，并将整个字符入self.buf等待显示          x = bin(byte).replace(&#39;0b&#39;,&#39;&#39;)          while len(x)&lt;8:#补全为8位            x = &#39;0&#39; + x          for r in x:#将黑白字符转为彩色字符放在self.buf中            if r == &#39;0&#39;:              self.buf[0+2*v:2+2*v] = _bg            else:              self.buf[0+2*v:2+2*v] = _fg            v = v + 1        self.show()#显示一个字符#功能：直接传入转化好的RGB565字库,不可改颜色，但速度更快    def printf(self,str,xstart,ystart,font_path=&quot;/sd/utf16.fzk&quot;,size=16):    charbytes = int((size**2)*2)#一个字符的所占的字节数，是跳转字库指针的最小单位     n = -1    pos_y = ystart    max = int(240/size)-1    with open(font_path,&#39;rb&#39;) as f:#打开字库      for c in str:#分割字符串为字符        n = n + 1        pos_x = xstart + size * n #y的位置为起始值加上n个字符size        if pos_x &gt;= 240 - 1.1 * size:#如果当前y位置超出屏幕          pos_y = pos_y + size#x位置向下偏移一个size&lt;换行&gt;          pos_x = xstart          n = -1        self.getbuffer(pos_x,pos_y,size,size)#每次显示一个字符        f.seek(ord(c)*charbytes)#跳转到字符c的位置        self.buf = f.read(charbytes)#读取字符c,返回此字符对应的点阵数据        self.show()#显示一个字符#---------------------------------------------------------------------------------------------#</code></pre><p><font color = bule size = 4> 字库文件通过取模软件生成,并将其格式处理为RGB65 存于内存卡中</font><br><font size = 4> 实现代码如下:</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">old = <span class="string">r&#x27;C:\Users\liu\Desktop\22.DZK&#x27;</span></span><br><span class="line">new = <span class="string">r&#x27;C:\Users\liu\Desktop\utf.zk&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(old,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(new,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            a = fd.read(<span class="number">32</span>)</span><br><span class="line">            <span class="keyword">for</span> w <span class="keyword">in</span> a:</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                x = <span class="built_in">bin</span>(w).replace(<span class="string">&#x27;0b&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">while</span> <span class="built_in">len</span>(x)&lt;<span class="number">8</span>:</span><br><span class="line">                    x = <span class="string">&#x27;0&#x27;</span> + x</span><br><span class="line">                <span class="keyword">for</span> r <span class="keyword">in</span> x:</span><br><span class="line">                    <span class="keyword">if</span> r == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                        f.write(<span class="string">b&#x27;\x00\x00&#x27;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        f.write(<span class="string">b&#x27;\xff\xff&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h5><p><img src="http://fp1.fghrsh.net/2021/01/05/86506395cd7b7506fd90782817c964cd.png" alt="alt 文本"></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建ESP开发板</title>
      <link href="2021/01/05/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAESP%E5%BC%80%E5%8F%91%E6%9D%BF/"/>
      <url>2021/01/05/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAESP%E5%BC%80%E5%8F%91%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h5 id="所需工具😎"><a href="#所需工具😎" class="headerlink" title="所需工具😎"></a>所需工具😎</h5><p><font size = 4>  电烙铁 手</font></p><h5 id="购买模块"><a href="#购买模块" class="headerlink" title="购买模块"></a>购买模块</h5><p><font size = 4>  洞洞板 ESP32最小系统板 0.96OLED 2.8寸TFT彩屏 排针排母若干 各类电源接口</font><br><img src="http://fp1.fghrsh.net/2021/01/05/4b1886b53da9a6828765d02253fdb094.md.png" alt="alt 文本"></p><h5 id="最终成果"><a href="#最终成果" class="headerlink" title="最终成果"></a>最终成果</h5><p><font size = 4>  洞洞板出来的板子效果不大好，但是可以正常使用</font><br><img src="http://fp1.fghrsh.net/2021/01/05/13a52db047b0058c023f5b6ceac16384.png" alt="alt 文本"></p><h5 id="安装开发软件"><a href="#安装开发软件" class="headerlink" title="安装开发软件"></a>安装开发软件</h5><p><font size = 4>  uPyCraft是一个micropython的代码编辑器，可以使用串口直接连接ESP32</font><br><img src="http://fp1.fghrsh.net/2021/01/05/453ba8508d1952baae1d76f8777631cb.jpg" alt="alt 文本"></p><h5 id="烧录ESP32固件"><a href="#烧录ESP32固件" class="headerlink" title="烧录ESP32固件"></a>烧录ESP32固件</h5><p><font size = 4>  由于准备使用micropython固件,所以第一步先去micropython官网下载esp32的固件包,之后在使用uPyCraft将固件烧录到ESP32内</font><br><img src="http://fp1.fghrsh.net/2021/01/05/73b8fab28b6935ed33bff39df55d10b3.png" alt="alt 文本"></p><h5 id="至此ESP32开发板已经初步完成"><a href="#至此ESP32开发板已经初步完成" class="headerlink" title="至此ESP32开发板已经初步完成"></a>至此ESP32开发板已经初步完成</h5><p><img src="http://fp1.fghrsh.net/2021/01/05/4f79123d4b77f258164a8b0fd8aa47d9.png" alt="alt 文本"></p><h5 id="下一步准备在写一个ESP32的ILI屏幕驱动-一会见ヾ-≧▽≦-o"><a href="#下一步准备在写一个ESP32的ILI屏幕驱动-一会见ヾ-≧▽≦-o" class="headerlink" title="下一步准备在写一个ESP32的ILI屏幕驱动,一会见ヾ(≧▽≦*)o"></a>下一步准备在写一个ESP32的ILI屏幕驱动,一会见ヾ(≧▽≦*)o</h5>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESP32 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
  
</search>
